/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IFuturesMarketInterface extends utils.Interface {
  contractName: "IFuturesMarket";
  functions: {
    "accessibleMargin(address)": FunctionFragment;
    "accruedFunding(address)": FunctionFragment;
    "assetPrice()": FunctionFragment;
    "baseAsset()": FunctionFragment;
    "canLiquidate(address)": FunctionFragment;
    "cancelNextPriceOrder(address)": FunctionFragment;
    "closePosition()": FunctionFragment;
    "closePositionWithTracking(bytes32)": FunctionFragment;
    "currentFundingRate()": FunctionFragment;
    "executeNextPriceOrder(address)": FunctionFragment;
    "fundingLastRecomputed()": FunctionFragment;
    "fundingSequence(uint256)": FunctionFragment;
    "fundingSequenceLength()": FunctionFragment;
    "liquidatePosition(address)": FunctionFragment;
    "liquidationFee(address)": FunctionFragment;
    "liquidationPrice(address)": FunctionFragment;
    "marketDebt()": FunctionFragment;
    "marketKey()": FunctionFragment;
    "marketSize()": FunctionFragment;
    "marketSizes()": FunctionFragment;
    "marketSkew()": FunctionFragment;
    "modifyPosition(int256)": FunctionFragment;
    "modifyPositionWithTracking(int256,bytes32)": FunctionFragment;
    "notionalValue(address)": FunctionFragment;
    "orderFee(int256)": FunctionFragment;
    "positions(address)": FunctionFragment;
    "postTradeDetails(int256,address)": FunctionFragment;
    "profitLoss(address)": FunctionFragment;
    "recomputeFunding()": FunctionFragment;
    "remainingMargin(address)": FunctionFragment;
    "submitNextPriceOrder(int256)": FunctionFragment;
    "submitNextPriceOrderWithTracking(int256,bytes32)": FunctionFragment;
    "transferMargin(int256)": FunctionFragment;
    "unrecordedFunding()": FunctionFragment;
    "withdrawAllMargin()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accessibleMargin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "accruedFunding",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "assetPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseAsset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "canLiquidate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelNextPriceOrder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closePositionWithTracking",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentFundingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeNextPriceOrder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "fundingLastRecomputed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingSequence",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundingSequenceLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePosition",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "marketDebt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "marketKey", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "marketSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketSizes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketSkew",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "modifyPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyPositionWithTracking",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "notionalValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "orderFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "positions", values: [string]): string;
  encodeFunctionData(
    functionFragment: "postTradeDetails",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "profitLoss", values: [string]): string;
  encodeFunctionData(
    functionFragment: "recomputeFunding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remainingMargin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitNextPriceOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitNextPriceOrderWithTracking",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferMargin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unrecordedFunding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllMargin",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accessibleMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accruedFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelNextPriceOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePositionWithTracking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeNextPriceOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingLastRecomputed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingSequence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingSequenceLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marketDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marketSkew", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modifyPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyPositionWithTracking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notionalValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postTradeDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "profitLoss", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recomputeFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitNextPriceOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitNextPriceOrderWithTracking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unrecordedFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllMargin",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IFuturesMarket extends BaseContract {
  contractName: "IFuturesMarket";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFuturesMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accessibleMargin(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { marginAccessible: BigNumber; invalid: boolean }
    >;

    accruedFunding(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { funding: BigNumber; invalid: boolean }>;

    assetPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { price: BigNumber; invalid: boolean }>;

    baseAsset(overrides?: CallOverrides): Promise<[string] & { key: string }>;

    canLiquidate(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cancelNextPriceOrder(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closePosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closePositionWithTracking(
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentFundingRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fundingRate: BigNumber }>;

    executeNextPriceOrder(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fundingLastRecomputed(
      overrides?: CallOverrides
    ): Promise<[number] & { timestamp: number }>;

    fundingSequence(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { netFunding: BigNumber }>;

    fundingSequenceLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { length: BigNumber }>;

    liquidatePosition(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidationFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidationPrice(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { price: BigNumber; invalid: boolean }>;

    marketDebt(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { debt: BigNumber; isInvalid: boolean }>;

    marketKey(overrides?: CallOverrides): Promise<[string] & { key: string }>;

    marketSize(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { size: BigNumber }>;

    marketSizes(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { long: BigNumber; short: BigNumber }>;

    marketSkew(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { skew: BigNumber }>;

    modifyPosition(
      sizeDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    modifyPositionWithTracking(
      sizeDelta: BigNumberish,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    notionalValue(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { value: BigNumber; invalid: boolean }>;

    orderFee(
      sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { fee: BigNumber; invalid: boolean }>;

    positions(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        fundingIndex: BigNumber;
        margin: BigNumber;
        lastPrice: BigNumber;
        size: BigNumber;
      }
    >;

    postTradeDetails(
      sizeDelta: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        margin: BigNumber;
        size: BigNumber;
        price: BigNumber;
        liqPrice: BigNumber;
        fee: BigNumber;
        status: number;
      }
    >;

    profitLoss(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { pnl: BigNumber; invalid: boolean }>;

    recomputeFunding(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    remainingMargin(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { marginRemaining: BigNumber; invalid: boolean }
    >;

    submitNextPriceOrder(
      sizeDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitNextPriceOrderWithTracking(
      sizeDelta: BigNumberish,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferMargin(
      marginDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unrecordedFunding(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { funding: BigNumber; invalid: boolean }>;

    withdrawAllMargin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accessibleMargin(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean] & { marginAccessible: BigNumber; invalid: boolean }
  >;

  accruedFunding(
    account: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { funding: BigNumber; invalid: boolean }>;

  assetPrice(
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { price: BigNumber; invalid: boolean }>;

  baseAsset(overrides?: CallOverrides): Promise<string>;

  canLiquidate(account: string, overrides?: CallOverrides): Promise<boolean>;

  cancelNextPriceOrder(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closePosition(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closePositionWithTracking(
    trackingCode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentFundingRate(overrides?: CallOverrides): Promise<BigNumber>;

  executeNextPriceOrder(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fundingLastRecomputed(overrides?: CallOverrides): Promise<number>;

  fundingSequence(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fundingSequenceLength(overrides?: CallOverrides): Promise<BigNumber>;

  liquidatePosition(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidationFee(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidationPrice(
    account: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { price: BigNumber; invalid: boolean }>;

  marketDebt(
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { debt: BigNumber; isInvalid: boolean }>;

  marketKey(overrides?: CallOverrides): Promise<string>;

  marketSize(overrides?: CallOverrides): Promise<BigNumber>;

  marketSizes(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { long: BigNumber; short: BigNumber }>;

  marketSkew(overrides?: CallOverrides): Promise<BigNumber>;

  modifyPosition(
    sizeDelta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  modifyPositionWithTracking(
    sizeDelta: BigNumberish,
    trackingCode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  notionalValue(
    account: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { value: BigNumber; invalid: boolean }>;

  orderFee(
    sizeDelta: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { fee: BigNumber; invalid: boolean }>;

  positions(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      id: BigNumber;
      fundingIndex: BigNumber;
      margin: BigNumber;
      lastPrice: BigNumber;
      size: BigNumber;
    }
  >;

  postTradeDetails(
    sizeDelta: BigNumberish,
    sender: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
      margin: BigNumber;
      size: BigNumber;
      price: BigNumber;
      liqPrice: BigNumber;
      fee: BigNumber;
      status: number;
    }
  >;

  profitLoss(
    account: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { pnl: BigNumber; invalid: boolean }>;

  recomputeFunding(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  remainingMargin(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean] & { marginRemaining: BigNumber; invalid: boolean }
  >;

  submitNextPriceOrder(
    sizeDelta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitNextPriceOrderWithTracking(
    sizeDelta: BigNumberish,
    trackingCode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferMargin(
    marginDelta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unrecordedFunding(
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { funding: BigNumber; invalid: boolean }>;

  withdrawAllMargin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accessibleMargin(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { marginAccessible: BigNumber; invalid: boolean }
    >;

    accruedFunding(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { funding: BigNumber; invalid: boolean }>;

    assetPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { price: BigNumber; invalid: boolean }>;

    baseAsset(overrides?: CallOverrides): Promise<string>;

    canLiquidate(account: string, overrides?: CallOverrides): Promise<boolean>;

    cancelNextPriceOrder(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    closePosition(overrides?: CallOverrides): Promise<void>;

    closePositionWithTracking(
      trackingCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    currentFundingRate(overrides?: CallOverrides): Promise<BigNumber>;

    executeNextPriceOrder(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    fundingLastRecomputed(overrides?: CallOverrides): Promise<number>;

    fundingSequence(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundingSequenceLength(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatePosition(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidationFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidationPrice(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { price: BigNumber; invalid: boolean }>;

    marketDebt(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { debt: BigNumber; isInvalid: boolean }>;

    marketKey(overrides?: CallOverrides): Promise<string>;

    marketSize(overrides?: CallOverrides): Promise<BigNumber>;

    marketSizes(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { long: BigNumber; short: BigNumber }>;

    marketSkew(overrides?: CallOverrides): Promise<BigNumber>;

    modifyPosition(
      sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    modifyPositionWithTracking(
      sizeDelta: BigNumberish,
      trackingCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    notionalValue(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { value: BigNumber; invalid: boolean }>;

    orderFee(
      sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { fee: BigNumber; invalid: boolean }>;

    positions(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        fundingIndex: BigNumber;
        margin: BigNumber;
        lastPrice: BigNumber;
        size: BigNumber;
      }
    >;

    postTradeDetails(
      sizeDelta: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        margin: BigNumber;
        size: BigNumber;
        price: BigNumber;
        liqPrice: BigNumber;
        fee: BigNumber;
        status: number;
      }
    >;

    profitLoss(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { pnl: BigNumber; invalid: boolean }>;

    recomputeFunding(overrides?: CallOverrides): Promise<BigNumber>;

    remainingMargin(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { marginRemaining: BigNumber; invalid: boolean }
    >;

    submitNextPriceOrder(
      sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitNextPriceOrderWithTracking(
      sizeDelta: BigNumberish,
      trackingCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferMargin(
      marginDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unrecordedFunding(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { funding: BigNumber; invalid: boolean }>;

    withdrawAllMargin(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    accessibleMargin(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accruedFunding(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    baseAsset(overrides?: CallOverrides): Promise<BigNumber>;

    canLiquidate(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelNextPriceOrder(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closePosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closePositionWithTracking(
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentFundingRate(overrides?: CallOverrides): Promise<BigNumber>;

    executeNextPriceOrder(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fundingLastRecomputed(overrides?: CallOverrides): Promise<BigNumber>;

    fundingSequence(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundingSequenceLength(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatePosition(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidationFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidationPrice(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketDebt(overrides?: CallOverrides): Promise<BigNumber>;

    marketKey(overrides?: CallOverrides): Promise<BigNumber>;

    marketSize(overrides?: CallOverrides): Promise<BigNumber>;

    marketSizes(overrides?: CallOverrides): Promise<BigNumber>;

    marketSkew(overrides?: CallOverrides): Promise<BigNumber>;

    modifyPosition(
      sizeDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    modifyPositionWithTracking(
      sizeDelta: BigNumberish,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    notionalValue(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderFee(
      sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positions(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    postTradeDetails(
      sizeDelta: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    profitLoss(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    recomputeFunding(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    remainingMargin(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitNextPriceOrder(
      sizeDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitNextPriceOrderWithTracking(
      sizeDelta: BigNumberish,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferMargin(
      marginDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unrecordedFunding(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAllMargin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accessibleMargin(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accruedFunding(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canLiquidate(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelNextPriceOrder(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closePosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closePositionWithTracking(
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentFundingRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeNextPriceOrder(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fundingLastRecomputed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundingSequence(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundingSequenceLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidatePosition(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidationFee(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationPrice(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketSizes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketSkew(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    modifyPosition(
      sizeDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    modifyPositionWithTracking(
      sizeDelta: BigNumberish,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    notionalValue(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderFee(
      sizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positions(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postTradeDetails(
      sizeDelta: BigNumberish,
      sender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    profitLoss(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recomputeFunding(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    remainingMargin(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitNextPriceOrder(
      sizeDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitNextPriceOrderWithTracking(
      sizeDelta: BigNumberish,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferMargin(
      marginDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unrecordedFunding(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawAllMargin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
