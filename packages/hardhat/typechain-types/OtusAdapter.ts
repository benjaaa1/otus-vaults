/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace VaultAdapter {
  export type TradeInputParametersStruct = {
    strikeId: BigNumberish;
    positionId: BigNumberish;
    iterations: BigNumberish;
    optionType: BigNumberish;
    amount: BigNumberish;
    setCollateralTo: BigNumberish;
    minTotalCost: BigNumberish;
    maxTotalCost: BigNumberish;
    rewardRecipient: string;
  };

  export type TradeInputParametersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    strikeId: BigNumber;
    positionId: BigNumber;
    iterations: BigNumber;
    optionType: number;
    amount: BigNumber;
    setCollateralTo: BigNumber;
    minTotalCost: BigNumber;
    maxTotalCost: BigNumber;
    rewardRecipient: string;
  };

  export type TradeResultStruct = {
    positionId: BigNumberish;
    totalCost: BigNumberish;
    totalFee: BigNumberish;
  };

  export type TradeResultStructOutput = [BigNumber, BigNumber, BigNumber] & {
    positionId: BigNumber;
    totalCost: BigNumber;
    totalFee: BigNumber;
  };

  export type ExchangeRateParamsStruct = {
    spotPrice: BigNumberish;
    quoteBaseFeeRate: BigNumberish;
    baseQuoteFeeRate: BigNumberish;
  };

  export type ExchangeRateParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    spotPrice: BigNumber;
    quoteBaseFeeRate: BigNumber;
    baseQuoteFeeRate: BigNumber;
  };

  export type OptionPositionStruct = {
    positionId: BigNumberish;
    strikeId: BigNumberish;
    optionType: BigNumberish;
    amount: BigNumberish;
    collateral: BigNumberish;
    state: BigNumberish;
  };

  export type OptionPositionStructOutput = [
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    number
  ] & {
    positionId: BigNumber;
    strikeId: BigNumber;
    optionType: number;
    amount: BigNumber;
    collateral: BigNumber;
    state: number;
  };

  export type StrikeStruct = {
    id: BigNumberish;
    expiry: BigNumberish;
    strikePrice: BigNumberish;
    skew: BigNumberish;
    boardIv: BigNumberish;
  };

  export type StrikeStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    expiry: BigNumber;
    strikePrice: BigNumber;
    skew: BigNumber;
    boardIv: BigNumber;
  };
}

export declare namespace Strategy {
  export type DetailStruct = {
    collatBuffer: BigNumberish;
    collatPercent: BigNumberish;
    minTimeToExpiry: BigNumberish;
    maxTimeToExpiry: BigNumberish;
    targetDelta: BigNumberish;
    maxDeltaGap: BigNumberish;
    minVol: BigNumberish;
    maxVol: BigNumberish;
    size: BigNumberish;
    minTradeInterval: BigNumberish;
    maxVolVariance: BigNumberish;
    gwavPeriod: BigNumberish;
  };

  export type DetailStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    collatBuffer: BigNumber;
    collatPercent: BigNumber;
    minTimeToExpiry: BigNumber;
    maxTimeToExpiry: BigNumber;
    targetDelta: BigNumber;
    maxDeltaGap: BigNumber;
    minVol: BigNumber;
    maxVol: BigNumber;
    size: BigNumber;
    minTradeInterval: BigNumber;
    maxVolVariance: BigNumber;
    gwavPeriod: BigNumber;
  };
}

export interface OtusAdapterInterface extends utils.Interface {
  contractName: "OtusAdapter";
  functions: {
    "_closePosition((uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256,address))": FunctionFragment;
    "_exchangeFromExactBase(uint256,uint256)": FunctionFragment;
    "_getBufferCollateral(uint8,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "_getExchangeParams()": FunctionFragment;
    "_getFullCollateral(uint8,uint256,uint256)": FunctionFragment;
    "_getPositions(uint256[])": FunctionFragment;
    "_getPremiumLimit((uint256,uint256,uint256,uint256,uint256),bool,(uint256,uint256,uint256,uint256,int256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8)": FunctionFragment;
    "_getRequiredCollateral(uint8,(uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,int256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256,bool)": FunctionFragment;
    "_getStrikes(uint256[])": FunctionFragment;
    "_isBaseCollat(uint8)": FunctionFragment;
    "_isCall(uint8)": FunctionFragment;
    "_isValidExpiry(uint256,uint256,uint256)": FunctionFragment;
    "_isValidVolVariance(uint256,uint256,uint256)": FunctionFragment;
    "_openPosition((uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256,address))": FunctionFragment;
    "gwavOracle()": FunctionFragment;
    "isValidStrike((uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,int256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint8)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBoard(uint256,(uint256,uint256,uint256,uint256,int256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "strategy()": FunctionFragment;
    "test()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_closePosition",
    values: [VaultAdapter.TradeInputParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_exchangeFromExactBase",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getBufferCollateral",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_getExchangeParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_getFullCollateral",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getPositions",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_getPremiumLimit",
    values: [
      VaultAdapter.StrikeStruct,
      boolean,
      Strategy.DetailStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_getRequiredCollateral",
    values: [
      BigNumberish,
      VaultAdapter.StrikeStruct,
      Strategy.DetailStruct,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_getStrikes",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_isBaseCollat",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_isCall",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_isValidExpiry",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_isValidVolVariance",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_openPosition",
    values: [VaultAdapter.TradeInputParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "gwavOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidStrike",
    values: [
      VaultAdapter.StrikeStruct,
      Strategy.DetailStruct,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBoard",
    values: [BigNumberish, Strategy.DetailStruct]
  ): string;
  encodeFunctionData(functionFragment: "strategy", values?: undefined): string;
  encodeFunctionData(functionFragment: "test", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "_closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_exchangeFromExactBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getBufferCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getExchangeParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getFullCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getPremiumLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getRequiredCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getStrikes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isBaseCollat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_isCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_isValidExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isValidVolVariance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gwavOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidStrike",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBoard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "strategy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "test", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface OtusAdapter extends BaseContract {
  contractName: "OtusAdapter";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OtusAdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _closePosition(
      params: VaultAdapter.TradeInputParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _exchangeFromExactBase(
      amountBase: BigNumberish,
      minQuoteReceived: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _getBufferCollateral(
      tradeOptionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      spotPrice: BigNumberish,
      amount: BigNumberish,
      collatBuffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getExchangeParams(
      overrides?: CallOverrides
    ): Promise<
      [VaultAdapter.ExchangeRateParamsStructOutput] & {
        params: VaultAdapter.ExchangeRateParamsStructOutput;
      }
    >;

    _getFullCollateral(
      tradeOptionType: BigNumberish,
      strikePrice: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fullCollat: BigNumber }>;

    _getPositions(
      positionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [VaultAdapter.OptionPositionStructOutput[]] & {
        positions: VaultAdapter.OptionPositionStructOutput[];
      }
    >;

    _getPremiumLimit(
      strike: VaultAdapter.StrikeStruct,
      isMin: boolean,
      currentStrategy: Strategy.DetailStruct,
      tradeOptionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { limitPremium: BigNumber }>;

    _getRequiredCollateral(
      tradeOptionType: BigNumberish,
      strike: VaultAdapter.StrikeStruct,
      currentStrategy: Strategy.DetailStruct,
      positionId: BigNumberish,
      isActiveStrike: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        collateralToAdd: BigNumber;
        setCollateralTo: BigNumber;
      }
    >;

    _getStrikes(
      strikeIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [VaultAdapter.StrikeStructOutput[]] & {
        allStrikes: VaultAdapter.StrikeStructOutput[];
      }
    >;

    _isBaseCollat(
      tradeOptionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isBase: boolean }>;

    _isCall(
      tradeOptionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isCall: boolean }>;

    _isValidExpiry(
      expiry: BigNumberish,
      minTimeToExpiry: BigNumberish,
      maxTimeToExpiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;

    _isValidVolVariance(
      strikeId: BigNumberish,
      maxVolVariance: BigNumberish,
      gwavPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;

    _openPosition(
      params: VaultAdapter.TradeInputParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gwavOracle(overrides?: CallOverrides): Promise<[string]>;

    isValidStrike(
      strike: VaultAdapter.StrikeStruct,
      currentStrategy: Strategy.DetailStruct,
      activeExpiry: BigNumberish,
      tradeOptionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBoard(
      boardId: BigNumberish,
      currentStrategy: Strategy.DetailStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { activeExpiry: BigNumber }>;

    strategy(overrides?: CallOverrides): Promise<[string]>;

    test(overrides?: CallOverrides): Promise<[string] & { t: string }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _closePosition(
    params: VaultAdapter.TradeInputParametersStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _exchangeFromExactBase(
    amountBase: BigNumberish,
    minQuoteReceived: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _getBufferCollateral(
    tradeOptionType: BigNumberish,
    strikePrice: BigNumberish,
    expiry: BigNumberish,
    spotPrice: BigNumberish,
    amount: BigNumberish,
    collatBuffer: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getExchangeParams(
    overrides?: CallOverrides
  ): Promise<VaultAdapter.ExchangeRateParamsStructOutput>;

  _getFullCollateral(
    tradeOptionType: BigNumberish,
    strikePrice: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getPositions(
    positionIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<VaultAdapter.OptionPositionStructOutput[]>;

  _getPremiumLimit(
    strike: VaultAdapter.StrikeStruct,
    isMin: boolean,
    currentStrategy: Strategy.DetailStruct,
    tradeOptionType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getRequiredCollateral(
    tradeOptionType: BigNumberish,
    strike: VaultAdapter.StrikeStruct,
    currentStrategy: Strategy.DetailStruct,
    positionId: BigNumberish,
    isActiveStrike: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      collateralToAdd: BigNumber;
      setCollateralTo: BigNumber;
    }
  >;

  _getStrikes(
    strikeIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<VaultAdapter.StrikeStructOutput[]>;

  _isBaseCollat(
    tradeOptionType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _isCall(
    tradeOptionType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _isValidExpiry(
    expiry: BigNumberish,
    minTimeToExpiry: BigNumberish,
    maxTimeToExpiry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _isValidVolVariance(
    strikeId: BigNumberish,
    maxVolVariance: BigNumberish,
    gwavPeriod: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _openPosition(
    params: VaultAdapter.TradeInputParametersStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gwavOracle(overrides?: CallOverrides): Promise<string>;

  isValidStrike(
    strike: VaultAdapter.StrikeStruct,
    currentStrategy: Strategy.DetailStruct,
    activeExpiry: BigNumberish,
    tradeOptionType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBoard(
    boardId: BigNumberish,
    currentStrategy: Strategy.DetailStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  strategy(overrides?: CallOverrides): Promise<string>;

  test(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _closePosition(
      params: VaultAdapter.TradeInputParametersStruct,
      overrides?: CallOverrides
    ): Promise<VaultAdapter.TradeResultStructOutput>;

    _exchangeFromExactBase(
      amountBase: BigNumberish,
      minQuoteReceived: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getBufferCollateral(
      tradeOptionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      spotPrice: BigNumberish,
      amount: BigNumberish,
      collatBuffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getExchangeParams(
      overrides?: CallOverrides
    ): Promise<VaultAdapter.ExchangeRateParamsStructOutput>;

    _getFullCollateral(
      tradeOptionType: BigNumberish,
      strikePrice: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getPositions(
      positionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<VaultAdapter.OptionPositionStructOutput[]>;

    _getPremiumLimit(
      strike: VaultAdapter.StrikeStruct,
      isMin: boolean,
      currentStrategy: Strategy.DetailStruct,
      tradeOptionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getRequiredCollateral(
      tradeOptionType: BigNumberish,
      strike: VaultAdapter.StrikeStruct,
      currentStrategy: Strategy.DetailStruct,
      positionId: BigNumberish,
      isActiveStrike: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        collateralToAdd: BigNumber;
        setCollateralTo: BigNumber;
      }
    >;

    _getStrikes(
      strikeIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<VaultAdapter.StrikeStructOutput[]>;

    _isBaseCollat(
      tradeOptionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _isCall(
      tradeOptionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _isValidExpiry(
      expiry: BigNumberish,
      minTimeToExpiry: BigNumberish,
      maxTimeToExpiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _isValidVolVariance(
      strikeId: BigNumberish,
      maxVolVariance: BigNumberish,
      gwavPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _openPosition(
      params: VaultAdapter.TradeInputParametersStruct,
      overrides?: CallOverrides
    ): Promise<VaultAdapter.TradeResultStructOutput>;

    gwavOracle(overrides?: CallOverrides): Promise<string>;

    isValidStrike(
      strike: VaultAdapter.StrikeStruct,
      currentStrategy: Strategy.DetailStruct,
      activeExpiry: BigNumberish,
      tradeOptionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBoard(
      boardId: BigNumberish,
      currentStrategy: Strategy.DetailStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strategy(overrides?: CallOverrides): Promise<string>;

    test(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    _closePosition(
      params: VaultAdapter.TradeInputParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _exchangeFromExactBase(
      amountBase: BigNumberish,
      minQuoteReceived: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _getBufferCollateral(
      tradeOptionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      spotPrice: BigNumberish,
      amount: BigNumberish,
      collatBuffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getExchangeParams(overrides?: CallOverrides): Promise<BigNumber>;

    _getFullCollateral(
      tradeOptionType: BigNumberish,
      strikePrice: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getPositions(
      positionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getPremiumLimit(
      strike: VaultAdapter.StrikeStruct,
      isMin: boolean,
      currentStrategy: Strategy.DetailStruct,
      tradeOptionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getRequiredCollateral(
      tradeOptionType: BigNumberish,
      strike: VaultAdapter.StrikeStruct,
      currentStrategy: Strategy.DetailStruct,
      positionId: BigNumberish,
      isActiveStrike: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getStrikes(
      strikeIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isBaseCollat(
      tradeOptionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isCall(
      tradeOptionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isValidExpiry(
      expiry: BigNumberish,
      minTimeToExpiry: BigNumberish,
      maxTimeToExpiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isValidVolVariance(
      strikeId: BigNumberish,
      maxVolVariance: BigNumberish,
      gwavPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _openPosition(
      params: VaultAdapter.TradeInputParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gwavOracle(overrides?: CallOverrides): Promise<BigNumber>;

    isValidStrike(
      strike: VaultAdapter.StrikeStruct,
      currentStrategy: Strategy.DetailStruct,
      activeExpiry: BigNumberish,
      tradeOptionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBoard(
      boardId: BigNumberish,
      currentStrategy: Strategy.DetailStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strategy(overrides?: CallOverrides): Promise<BigNumber>;

    test(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _closePosition(
      params: VaultAdapter.TradeInputParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _exchangeFromExactBase(
      amountBase: BigNumberish,
      minQuoteReceived: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _getBufferCollateral(
      tradeOptionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      spotPrice: BigNumberish,
      amount: BigNumberish,
      collatBuffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getExchangeParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getFullCollateral(
      tradeOptionType: BigNumberish,
      strikePrice: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getPositions(
      positionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getPremiumLimit(
      strike: VaultAdapter.StrikeStruct,
      isMin: boolean,
      currentStrategy: Strategy.DetailStruct,
      tradeOptionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getRequiredCollateral(
      tradeOptionType: BigNumberish,
      strike: VaultAdapter.StrikeStruct,
      currentStrategy: Strategy.DetailStruct,
      positionId: BigNumberish,
      isActiveStrike: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getStrikes(
      strikeIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isBaseCollat(
      tradeOptionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isCall(
      tradeOptionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isValidExpiry(
      expiry: BigNumberish,
      minTimeToExpiry: BigNumberish,
      maxTimeToExpiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isValidVolVariance(
      strikeId: BigNumberish,
      maxVolVariance: BigNumberish,
      gwavPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _openPosition(
      params: VaultAdapter.TradeInputParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gwavOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidStrike(
      strike: VaultAdapter.StrikeStruct,
      currentStrategy: Strategy.DetailStruct,
      activeExpiry: BigNumberish,
      tradeOptionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBoard(
      boardId: BigNumberish,
      currentStrategy: Strategy.DetailStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    strategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    test(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
