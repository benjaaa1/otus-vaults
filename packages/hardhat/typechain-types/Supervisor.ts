/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface SupervisorInterface extends utils.Interface {
  contractName: "Supervisor";
  functions: {
    "initialize()": FunctionFragment;
    "otusAsset()": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "supervisor()": FunctionFragment;
    "treasury()": FunctionFragment;
    "unstake()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "otusAsset", values?: undefined): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "supervisor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "unstake", values?: undefined): string;

  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "otusAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supervisor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {
    "NewSupervisorStake(address,uint256)": EventFragment;
    "NewSupervisorUnStake(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewSupervisorStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSupervisorUnStake"): EventFragment;
}

export type NewSupervisorStakeEvent = TypedEvent<
  [string, BigNumber],
  { owner: string; _amount: BigNumber }
>;

export type NewSupervisorStakeEventFilter =
  TypedEventFilter<NewSupervisorStakeEvent>;

export type NewSupervisorUnStakeEvent = TypedEvent<
  [string, BigNumber],
  { owner: string; _amount: BigNumber }
>;

export type NewSupervisorUnStakeEventFilter =
  TypedEventFilter<NewSupervisorUnStakeEvent>;

export interface Supervisor extends BaseContract {
  contractName: "Supervisor";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SupervisorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    otusAsset(overrides?: CallOverrides): Promise<[string]>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supervisor(overrides?: CallOverrides): Promise<[string]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    unstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  otusAsset(overrides?: CallOverrides): Promise<string>;

  stake(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supervisor(overrides?: CallOverrides): Promise<string>;

  treasury(overrides?: CallOverrides): Promise<string>;

  unstake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    initialize(overrides?: CallOverrides): Promise<void>;

    otusAsset(overrides?: CallOverrides): Promise<string>;

    stake(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    supervisor(overrides?: CallOverrides): Promise<string>;

    treasury(overrides?: CallOverrides): Promise<string>;

    unstake(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "NewSupervisorStake(address,uint256)"(
      owner?: null,
      _amount?: null
    ): NewSupervisorStakeEventFilter;
    NewSupervisorStake(
      owner?: null,
      _amount?: null
    ): NewSupervisorStakeEventFilter;

    "NewSupervisorUnStake(address,uint256)"(
      owner?: null,
      _amount?: null
    ): NewSupervisorUnStakeEventFilter;
    NewSupervisorUnStake(
      owner?: null,
      _amount?: null
    ): NewSupervisorUnStakeEventFilter;
  };

  estimateGas: {
    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    otusAsset(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supervisor(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    otusAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supervisor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
