/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockFuturesMarket,
  MockFuturesMarketInterface,
} from "../MockFuturesMarket";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "modifyPosition",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50607780601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806389419b8014602d575b600080fd5b604080516000815290519081900360200190f3fea2646970667358221220269d009bb9a5b2e554341ffcec226404c18b2e6ef0408e5eec4dfd1cbe2ae5c564736f6c63430008090033";

type MockFuturesMarketConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockFuturesMarketConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockFuturesMarket__factory extends ContractFactory {
  constructor(...args: MockFuturesMarketConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MockFuturesMarket";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockFuturesMarket> {
    return super.deploy(overrides || {}) as Promise<MockFuturesMarket>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockFuturesMarket {
    return super.attach(address) as MockFuturesMarket;
  }
  connect(signer: Signer): MockFuturesMarket__factory {
    return super.connect(signer) as MockFuturesMarket__factory;
  }
  static readonly contractName: "MockFuturesMarket";
  public readonly contractName: "MockFuturesMarket";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockFuturesMarketInterface {
    return new utils.Interface(_abi) as MockFuturesMarketInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockFuturesMarket {
    return new Contract(address, _abi, signerOrProvider) as MockFuturesMarket;
  }
}
