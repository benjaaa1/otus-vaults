/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockStrategy, MockStrategyInterface } from "../MockStrategy";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20Detailed",
        name: "_premiumToken",
        type: "address",
      },
      {
        internalType: "contract IERC20Detailed",
        name: "_collateralToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "boardId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "collateral",
    outputs: [
      {
        internalType: "contract IERC20Detailed",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_vault",
        type: "address",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "premium",
    outputs: [
      {
        internalType: "contract IERC20Detailed",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "returnFundsAndClearStrikes",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_boardId",
        type: "uint256",
      },
    ],
    name: "setBoard",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_premium",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_collateral",
        type: "uint256",
      },
    ],
    name: "setMockedTradeAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tradeCollateralAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tradePremiumAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161092f38038061092f83398101604081905261002f91610062565b6001600160a01b039081166080521660a052610095565b80516001600160a01b038116811461005d57600080fd5b919050565b6000806040838503121561007557600080fd5b61007e83610046565b915061008c60208401610046565b90509250929050565b60805160a0516108596100d6600039600081816101470152818161040701526104a6015260008181610120015281816102c4015261036301526108596000f3fe608060405234801561001057600080fd5b50600436106100a45760003560e01c806342f0a505146100a9578063485cc955146100c5578063715018a6146100da57806383cea542146100e25780638da5cb5b146100ea578063ae74fc4d146100ff578063c5374d9d14610112578063d8dfeb451461011b578063e0a73a9314610142578063f2fde38b14610169578063f741d06d1461017c578063fa45084814610195575b600080fd5b6100b260665481565b6040519081526020015b60405180910390f35b6100d86100d33660046106ab565b61019e565b005b6100d861026f565b6100d86102aa565b6100f261052f565b6040516100bc91906106de565b6100d861010d3660046106f2565b606755565b6100b260655481565b6100f27f000000000000000000000000000000000000000000000000000000000000000081565b6100f27f000000000000000000000000000000000000000000000000000000000000000081565b6100d861017736600461070b565b61053e565b6100d861018a36600461072d565b606591909155606655565b6100b260675481565b600054610100900460ff166101b95760005460ff16156101bd565b303b155b6102255760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff16158015610247576000805461ffff19166101011790555b61024f6105de565b6102588261053e565b801561026a576000805461ff00191690555b505050565b3361027861052f565b6001600160a01b03161461029e5760405162461bcd60e51b815260040161021c9061074f565b6102a8600061060d565b565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906102f99030906004016106de565b60206040518083038186803b15801561031157600080fd5b505afa158015610325573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103499190610784565b60405163a9059cbb60e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb9061039a903390859060040161079d565b602060405180830381600087803b1580156103b457600080fd5b505af11580156103c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ec91906107b6565b506040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061043c9030906004016106de565b60206040518083038186803b15801561045457600080fd5b505afa158015610468573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048c9190610784565b60405163a9059cbb60e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906104dd903390859060040161079d565b602060405180830381600087803b1580156104f757600080fd5b505af115801561050b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026a91906107b6565b6033546001600160a01b031690565b3361054761052f565b6001600160a01b03161461056d5760405162461bcd60e51b815260040161021c9061074f565b6001600160a01b0381166105d25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161021c565b6105db8161060d565b50565b600054610100900460ff166106055760405162461bcd60e51b815260040161021c906107d8565b6102a861065f565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166106865760405162461bcd60e51b815260040161021c906107d8565b6102a83361060d565b80356001600160a01b03811681146106a657600080fd5b919050565b600080604083850312156106be57600080fd5b6106c78361068f565b91506106d56020840161068f565b90509250929050565b6001600160a01b0391909116815260200190565b60006020828403121561070457600080fd5b5035919050565b60006020828403121561071d57600080fd5b6107268261068f565b9392505050565b6000806040838503121561074057600080fd5b50508035926020909101359150565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561079657600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b6000602082840312156107c857600080fd5b8151801515811461072657600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212209241f73414f8d6db5b3fc35b7d47393f186f4cd3173469d7bef36120c74f64ce64736f6c63430008090033";

type MockStrategyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockStrategyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockStrategy__factory extends ContractFactory {
  constructor(...args: MockStrategyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MockStrategy";
  }

  deploy(
    _premiumToken: string,
    _collateralToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockStrategy> {
    return super.deploy(
      _premiumToken,
      _collateralToken,
      overrides || {}
    ) as Promise<MockStrategy>;
  }
  getDeployTransaction(
    _premiumToken: string,
    _collateralToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _premiumToken,
      _collateralToken,
      overrides || {}
    );
  }
  attach(address: string): MockStrategy {
    return super.attach(address) as MockStrategy;
  }
  connect(signer: Signer): MockStrategy__factory {
    return super.connect(signer) as MockStrategy__factory;
  }
  static readonly contractName: "MockStrategy";
  public readonly contractName: "MockStrategy";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockStrategyInterface {
    return new utils.Interface(_abi) as MockStrategyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockStrategy {
    return new Contract(address, _abi, signerOrProvider) as MockStrategy;
  }
}
