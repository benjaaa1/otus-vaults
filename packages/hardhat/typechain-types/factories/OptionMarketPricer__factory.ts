/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OptionMarketPricer,
  OptionMarketPricerInterface,
} from "../OptionMarketPricer";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "optionPriceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee1xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee2xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee1xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee2xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vegaFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "standardSize",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skewAdjustmentFactor",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct OptionMarketPricer.PricingParameters",
        name: "pricingParams",
        type: "tuple",
      },
    ],
    name: "PricingParametersSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "minDelta",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "minForceCloseDelta",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "tradingCutoff",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minBaseIV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxBaseIV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minVol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxVol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "absMinSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "absMaxSkew",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct OptionMarketPricer.TradeLimitParameters",
        name: "tradeLimitParams",
        type: "tuple",
      },
    ],
    name: "TradeLimitParametersSet",
    type: "event",
  },
  {
    inputs: [],
    name: "getPricingParams",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "optionPriceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee1xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee2xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee1xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee2xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vegaFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "standardSize",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skewAdjustmentFactor",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.PricingParameters",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expiry",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "pointA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "pointB",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "coefficient",
        type: "uint256",
      },
    ],
    name: "getTimeWeightedFee",
    outputs: [
      {
        internalType: "uint256",
        name: "timeWeightedFee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTradeLimitParams",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "minDelta",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "minForceCloseDelta",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "tradingCutoff",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minBaseIV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxBaseIV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minVol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxVol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "absMinSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "absMaxSkew",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.TradeLimitParameters",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isBuy",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isForceClose",
            type: "bool",
          },
          {
            internalType: "enum OptionMarket.TradeDirection",
            name: "tradeDirection",
            type: "uint8",
          },
          {
            internalType: "enum OptionMarket.OptionType",
            name: "optionType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strikePrice",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "freeLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "burnableLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedCollatLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "pendingDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "NAV",
                type: "uint256",
              },
            ],
            internalType: "struct LiquidityPool.Liquidity",
            name: "liquidity",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "spotPrice",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "quoteKey",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "baseKey",
                type: "bytes32",
              },
              {
                internalType: "contract ICollateralShort",
                name: "short",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "quoteBaseFeeRate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "baseQuoteFeeRate",
                type: "uint256",
              },
            ],
            internalType: "struct SynthetixAdapter.ExchangeParams",
            name: "exchangeParams",
            type: "tuple",
          },
        ],
        internalType: "struct OptionMarket.Trade",
        name: "trade",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "optionPrice",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "preTradeAmmNetStdVega",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "postTradeAmmNetStdVega",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "callDelta",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "volTraded",
            type: "uint256",
          },
        ],
        internalType: "struct OptionGreekCache.TradePricing",
        name: "pricing",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "newBaseIv",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "newSkew",
        type: "uint256",
      },
    ],
    name: "getTradeResult",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vegaUtilFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "volTraded",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "newBaseIv",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "newSkew",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.TradeResult",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isBuy",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isForceClose",
            type: "bool",
          },
          {
            internalType: "enum OptionMarket.TradeDirection",
            name: "tradeDirection",
            type: "uint8",
          },
          {
            internalType: "enum OptionMarket.OptionType",
            name: "optionType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strikePrice",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "freeLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "burnableLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedCollatLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "pendingDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "NAV",
                type: "uint256",
              },
            ],
            internalType: "struct LiquidityPool.Liquidity",
            name: "liquidity",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "spotPrice",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "quoteKey",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "baseKey",
                type: "bytes32",
              },
              {
                internalType: "contract ICollateralShort",
                name: "short",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "quoteBaseFeeRate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "baseQuoteFeeRate",
                type: "uint256",
              },
            ],
            internalType: "struct SynthetixAdapter.ExchangeParams",
            name: "exchangeParams",
            type: "tuple",
          },
        ],
        internalType: "struct OptionMarket.Trade",
        name: "trade",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "optionPrice",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "preTradeAmmNetStdVega",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "postTradeAmmNetStdVega",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "callDelta",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "volTraded",
            type: "uint256",
          },
        ],
        internalType: "struct OptionGreekCache.TradePricing",
        name: "pricing",
        type: "tuple",
      },
    ],
    name: "getVegaUtilFee",
    outputs: [
      {
        internalType: "uint256",
        name: "vegaUtilFee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_optionMarket",
        type: "address",
      },
      {
        internalType: "contract OptionGreekCache",
        name: "_greekCache",
        type: "address",
      },
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strikePrice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "longCall",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortCallBase",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortCallQuote",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "longPut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortPut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "boardId",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarket.Strike",
        name: "strike",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "isBuy",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isForceClose",
            type: "bool",
          },
          {
            internalType: "enum OptionMarket.TradeDirection",
            name: "tradeDirection",
            type: "uint8",
          },
          {
            internalType: "enum OptionMarket.OptionType",
            name: "optionType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strikePrice",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "freeLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "burnableLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedCollatLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "pendingDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "NAV",
                type: "uint256",
              },
            ],
            internalType: "struct LiquidityPool.Liquidity",
            name: "liquidity",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "spotPrice",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "quoteKey",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "baseKey",
                type: "bytes32",
              },
              {
                internalType: "contract ICollateralShort",
                name: "short",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "quoteBaseFeeRate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "baseQuoteFeeRate",
                type: "uint256",
              },
            ],
            internalType: "struct SynthetixAdapter.ExchangeParams",
            name: "exchangeParams",
            type: "tuple",
          },
        ],
        internalType: "struct OptionMarket.Trade",
        name: "trade",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "boardBaseIv",
        type: "uint256",
      },
    ],
    name: "ivImpactForTrade",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pricingParams",
    outputs: [
      {
        internalType: "uint256",
        name: "optionPriceFeeCoefficient",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optionPriceFee1xPoint",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optionPriceFee2xPoint",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "spotPriceFeeCoefficient",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "spotPriceFee1xPoint",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "spotPriceFee2xPoint",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "vegaFeeCoefficient",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "standardSize",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "skewAdjustmentFactor",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "optionPriceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee1xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee2xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee1xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee2xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vegaFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "standardSize",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skewAdjustmentFactor",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.PricingParameters",
        name: "_pricingParams",
        type: "tuple",
      },
    ],
    name: "setPricingParams",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "minDelta",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "minForceCloseDelta",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "tradingCutoff",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minBaseIV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxBaseIV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minVol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxVol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "absMinSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "absMaxSkew",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.TradeLimitParameters",
        name: "_tradeLimitParams",
        type: "tuple",
      },
    ],
    name: "setTradeLimitParams",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tradeLimitParams",
    outputs: [
      {
        internalType: "int256",
        name: "minDelta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "minForceCloseDelta",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "tradingCutoff",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minBaseIV",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxBaseIV",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minSkew",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxSkew",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minVol",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxVol",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "absMinSkew",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "absMaxSkew",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strikePrice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "longCall",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortCallBase",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortCallQuote",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "longPut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortPut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "boardId",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarket.Strike",
        name: "strike",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "isBuy",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isForceClose",
            type: "bool",
          },
          {
            internalType: "enum OptionMarket.TradeDirection",
            name: "tradeDirection",
            type: "uint8",
          },
          {
            internalType: "enum OptionMarket.OptionType",
            name: "optionType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strikePrice",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "freeLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "burnableLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedCollatLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "pendingDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "NAV",
                type: "uint256",
              },
            ],
            internalType: "struct LiquidityPool.Liquidity",
            name: "liquidity",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "spotPrice",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "quoteKey",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "baseKey",
                type: "bytes32",
              },
              {
                internalType: "contract ICollateralShort",
                name: "short",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "quoteBaseFeeRate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "baseQuoteFeeRate",
                type: "uint256",
              },
            ],
            internalType: "struct SynthetixAdapter.ExchangeParams",
            name: "exchangeParams",
            type: "tuple",
          },
        ],
        internalType: "struct OptionMarket.Trade",
        name: "trade",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "boardBaseIv",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "boardExpiry",
        type: "uint256",
      },
    ],
    name: "updateCacheAndGetTradeResult",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vegaUtilFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "volTraded",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "newBaseIv",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "newSkew",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.TradeResult",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526002805460ff60a01b1916905534801561001d57600080fd5b506100273361002c565b61007c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611cde8061008b6000396000f3fe608060405234801561001057600080fd5b50600436106100c55760003560e01c80633c330bfc146100ca5780634907472b146100df5780636b16b8a21461015c5780636f2fddc614610184578063715018a6146101f25780638747e008146101fa578063895ccf8d1461021b5780638da5cb5b1461022e578063d44558d21461024e578063da53763114610261578063e4e68b4d14610276578063ea5b522514610289578063f09a40161461030e578063f2fde38b14610321578063ffae4b3614610334575b600080fd5b6100dd6100d8366004611384565b6103c1565b005b6100f26100ed36600461163c565b610627565b6040516101539190600061010082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015292915050565b60405180910390f35b61016f61016a3660046116fd565b610778565b60408051928352602083019190915201610153565b600354600454600554600654600754600854600954600a54600b546101ae98979695949392919089565b60408051998a5260208a0198909852968801959095526060870193909352608086019190915260a085015260c084015260e083015261010082015261012001610153565b6100dd61080e565b61020d61020836600461173e565b610849565b604051908152602001610153565b6100dd610229366004611775565b6108c4565b610236610abc565b6040516001600160a01b039091168152602001610153565b61020d61025c366004611792565b610acb565b610269610b48565b604051610153919061181e565b6100f261028436600461182d565b610bee565b600c54600d54600e54600f546010546011546012546013546014546015546016546102bb9a999897969594939291908b565b604080519b8c5260208c019a909a52988a01979097526060890195909552608088019390935260a087019190915260c086015260e085015261010084015261012083015261014082015261016001610153565b6100dd61031c366004611875565b611000565b6100dd61032f3660046118ae565b611094565b61033c611134565b6040516101539190600061016082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151818401525092915050565b336103ca610abc565b6001600160a01b0316146103f95760405162461bcd60e51b81526004016103f0906118cb565b60405180910390fd5b8051670de0b6b3a76400001280159061041e5750670de0b6b3a7640000816020015113155b801561042e575060008160400151115b80156104415750620d2f00816040015111155b80156104585750678ac7230489e800008160600151105b8015610468575060008160800151115b8015610480575068056bc75e2d631000008160800151105b80156104975750678ac7230489e800008160a00151105b80156104a7575060008160c00151115b80156104be5750678ac7230489e800008160c00151105b80156104cf57506000816101000151115b80156104e057506000816101400151115b6105275760405162461bcd60e51b8152602060048201526018602482015277696e76616c69642074726164654c696d6974506172616d7360401b60448201526064016103f0565b8051600c9081556020820151600d55604080830151600e556060830151600f55608083015160105560a083015160115560c083015160125560e0830151601355610100830151601455610120830151601555610140830151601655517f2135fa2736be8081ab91486a6db26753addaf05087ae4474b3650fc0f069bfaf9161061c918154815260018201546020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e082015260088201546101008201526009820154610120820152600a909101546101408201526101600190565b60405180910390a150565b61062f6112a7565b600061063b8686610849565b60808701518651919250600091610651916111fa565b905060006106748860a00151600360010154600360020154600360000154610acb565b905060006106968960a001516003600401546003600501546003800154610acb565b905060006106a483856111fa565b905060006106d28b608001516106cc8d610100015160000151866111fa90919063ffffffff16565b906111fa565b90506000866106e18385611916565b6106eb9190611916565b905060008c600001511561070a576107038288611916565b9050610727565b8682111561071a57506000610727565b610724828861192e565b90505b6040518061010001604052808881526020018581526020018481526020018981526020018281526020018d6080015181526020018c81526020018b815250985050505050505050505b949350505050565b6000806000610799600360070154866080015161122390919063ffffffff16565b905060006107a8606483611945565b600b549091506000906107bc9083906111fa565b8751909150156107ec576107d08287611916565b8189604001516107e09190611916565b94509450505050610806565b6107f6828761192e565b8189604001516107e0919061192e565b935093915050565b33610817610abc565b6001600160a01b03161461083d5760405162461bcd60e51b81526004016103f0906118cb565b610847600061123c565b565b6000610858826040015161128c565b610865836020015161128c565b10610872575060006108be565b60006108a18460e0015160a0015161089b610890866040015161128c565b6080870151906111fa565b90611223565b60808501516009549192506108ba916106cc90846111fa565b9150505b92915050565b336108cd610abc565b6001600160a01b0316146108f35760405162461bcd60e51b81526004016103f0906118cb565b8051680ad78ebc5ac6200000108015906109195750671bc16d674ec80000816060015111155b801561092c575062093a80816020015110155b801561094d575060208101516109459062093a80611916565b816040015110155b8015610960575062093a80816080015110155b8015610981575060808101516109799062093a80611916565b8160a0015110155b8015610991575060008160e00151115b80156109ab5750683635c9adc5dea0000081610100015111155b6109ef5760405162461bcd60e51b8152602060048201526015602482015274696e76616c69642070726963696e67506172616d7360581b60448201526064016103f0565b8051600390815560208201516004556040808301516005556060830151600655608083015160075560a083015160085560c083015160095560e0830151600a55610100830151600b55517f711f183bddaf64ef835c226f41269be5151112d393dbb05c83746bff24390a2a9161061c918154815260018201546020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e08201526008909101546101008201526101200190565b6000546001600160a01b031690565b600080610ad8428761192e565b9050848111610aea5782915050610770565b610b3e610af7868661192e565b610b036012600a611a4b565b610b0d888561192e565b610b179190611a57565b610b219190611945565b610b2d6012600a611a4b565b610b379190611916565b84906111fa565b9695505050505050565b610b976040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b50604080516101208101825260035481526004546020820152600554918101919091526006546060820152600754608082015260085460a082015260095460c0820152600a5460e0820152600b5461010082015290565b610bf66112a7565b6001546001600160a01b03163314610c445760405162461bcd60e51b81526020600482015260116024820152701bdb9b1e481bdc1d1a5bdb93585c9ad95d607a1b60448201526064016103f0565b600080610c52878787610778565b91509150600084600c6002015442610c6a9190611916565b119050866020015115610d0657859250600287604001516002811115610c9257610c92611a76565b1480610cab575060165482108015610cab575060155482115b610d015760405162461bcd60e51b815260206004820152602160248201527f6e657720736b6577206f757473696465206162736f6c757465206d696e2f6d616044820152600f60fb1b60648201526084016103f0565b610e33565b8015610d4d5760405162461bcd60e51b81526020600482015260166024820152751d1c98591a5b99c818dd5d1bd999881c995858da195960521b60448201526064016103f0565b6000610d5984846111fa565b885190915015610dcd576010548411801590610d7757506012548311155b8015610d8557506014548111155b610dc85760405162461bcd60e51b81526020600482015260146024820152730d2ec5eecded85ee6d6caee40e8dede40d0d2ced60631b60448201526064016103f0565b610e31565b600f548410801590610de157506011548310155b8015610def57506013548110155b610e315760405162461bcd60e51b815260206004820152601360248201527269762f766f6c2f736b657720746f6f206c6f7760681b60448201526064016103f0565b505b600254604051635ce685a960e11b81526000916001600160a01b03169063b9cd0b5290610e6c908c908c90899089908990600401611ab0565b60a060405180830381600087803b158015610e8657600080fd5b505af1158015610e9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebe9190611bcf565b9050876020015115610f7457600288604001516002811115610ee257610ee2611a76565b1480610eeb5750815b80610efc5750600d54606082015113155b80610f235750600d54610f116012600a611a4b565b610f1b9190611c4c565b816060015112155b610f6f5760405162461bcd60e51b815260206004820152601e60248201527f666f72636520636c6f73652064656c7461206f7574206f662072616e6765000060448201526064016103f0565b610fe7565b600c54606082015112801590610fa65750600c54610f946012600a611a4b565b610f9e9190611c4c565b816060015113155b610fe75760405162461bcd60e51b815260206004820152601260248201527164656c7461206f7574206f662072616e676560701b60448201526064016103f0565b610ff388828686610627565b9998505050505050505050565b600254600160a01b900460ff16156110595760405162461bcd60e51b815260206004820152601c60248201527b18dbdb9d1c9858dd08185b1c9958591e481a5b9a5d1a585b1a5e995960221b60448201526064016103f0565b600180546001600160a01b039384166001600160a01b0319909116179055600280546001600160a81b0319169190921617600160a01b179055565b3361109d610abc565b6001600160a01b0316146110c35760405162461bcd60e51b81526004016103f0906118cb565b6001600160a01b0381166111285760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103f0565b6111318161123c565b50565b61119160405180610160016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b506040805161016081018252600c548152600d546020820152600e5491810191909152600f546060820152601054608082015260115460a082015260125460c082015260135460e082015260145461010082015260155461012082015260165461014082015290565b60006112086012600a611a4b565b6112128385611a57565b61121c9190611945565b9392505050565b6000816112326012600a611a4b565b6112129085611a57565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008082136112a35761129e82611c8b565b6108be565b5090565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405161016081016001600160401b038111828210171561131d57634e487b7160e01b600052604160045260246000fd5b60405290565b60405160c081016001600160401b038111828210171561131d57634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b038111828210171561131d57634e487b7160e01b600052604160045260246000fd5b6000610160828403121561139757600080fd5b61139f6112ec565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152506101208084013581830152506101408084013581830152508091505092915050565b8035801515811461142757600080fd5b919050565b80356003811061142757600080fd5b80356005811061142757600080fd5b600060c0828403121561145c57600080fd5b611464611323565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015292915050565b6001600160a01b038116811461113157600080fd5b600060c082840312156114c957600080fd5b6114d1611323565b905081358152602082013560208201526040820135604082015260608201356114f9816114a2565b806060830152506080820135608082015260a082013560a082015292915050565b6000610260828403121561152d57600080fd5b611535611353565b905061154082611417565b815261154e60208301611417565b602082015261155f6040830161142c565b60408201526115706060830161143b565b60608201526080820135608082015260a082013560a082015260c082013560c08201526115a08360e0840161144a565b60e08201526115b3836101a084016114b7565b61010082015292915050565b600060a082840312156115d157600080fd5b60405160a081016001600160401b038111828210171561160157634e487b7160e01b600052604160045260246000fd5b806040525080915082358152602083013560208201526040830135604082015260608301356060820152608083013560808201525092915050565b600080600080610340858703121561165357600080fd5b61165d868661151a565b935061166d8661026087016115bf565b939693955050505061030082013591610320013590565b6000610120828403121561169757600080fd5b61169f611353565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525092915050565b60008060006103a0848603121561171357600080fd5b61171d8585611684565b925061172d85610120860161151a565b915061038084013590509250925092565b600080610300838503121561175257600080fd5b61175c848461151a565b915061176c8461026085016115bf565b90509250929050565b6000610120828403121561178857600080fd5b61121c8383611684565b600080600080608085870312156117a857600080fd5b5050823594602084013594506040840135936060013592509050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152505050565b61012081016108be82846117c4565b6000806000806103c0858703121561184457600080fd5b61184e8686611684565b935061185e86610120870161151a565b9396939550505050610380820135916103a0013590565b6000806040838503121561188857600080fd5b8235611893816114a2565b915060208301356118a3816114a2565b809150509250929050565b6000602082840312156118c057600080fd5b813561121c816114a2565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561192957611929611900565b500190565b60008282101561194057611940611900565b500390565b60008261196257634e487b7160e01b600052601260045260246000fd5b500490565b600181815b808511156119a257816000190482111561198857611988611900565b8085161561199557918102915b93841c939080029061196c565b509250929050565b6000826119b9575060016108be565b816119c6575060006108be565b81600181146119dc57600281146119e657611a02565b60019150506108be565b60ff8411156119f7576119f7611900565b50506001821b6108be565b5060208310610133831016604e8410600b8410161715611a25575081810a6108be565b611a2f8383611967565b8060001904821115611a4357611a43611900565b029392505050565b600061121c83836119aa565b6000816000190483118215151615611a7157611a71611900565b500290565b634e487b7160e01b600052602160045260246000fd5b60038110611a9c57611a9c611a76565b9052565b60058110611a9c57611a9c611a76565b6103e08101611abf82886117c4565b85511515610120830152602086015115156101408301526040860151611ae9610160840182611a8c565b506060860151611afd610180840182611aa0565b506080868101516101a084015260a0808801516101c085015260c08801516101e085015260e08801518051610200860152602081015161022086015260408101516102408601526060810151610260860152918201516102808501528101516102a08401525061010086015180516102c084015260208101516102e0840152604081015161030084015260608101516001600160a01b0316610320840152608081015161034084015260a08101516103608401525084610380830152836103a0830152610b3e6103c083018415159052565b600060a08284031215611be157600080fd5b60405160a081016001600160401b0381118282101715611c1157634e487b7160e01b600052604160045260246000fd5b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b60008083128015600160ff1b850184121615611c6a57611c6a611900565b6001600160ff1b0384018313811615611c8557611c85611900565b50500390565b6000600160ff1b821415611ca157611ca1611900565b506000039056fea2646970667358221220242ebea3c3e91b020c670f4d5c5ac66de5744fb8a77e0f7d0d1c0ca66010348b64736f6c63430008090033";

type OptionMarketPricerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OptionMarketPricerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OptionMarketPricer__factory extends ContractFactory {
  constructor(...args: OptionMarketPricerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "OptionMarketPricer";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OptionMarketPricer> {
    return super.deploy(overrides || {}) as Promise<OptionMarketPricer>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): OptionMarketPricer {
    return super.attach(address) as OptionMarketPricer;
  }
  connect(signer: Signer): OptionMarketPricer__factory {
    return super.connect(signer) as OptionMarketPricer__factory;
  }
  static readonly contractName: "OptionMarketPricer";
  public readonly contractName: "OptionMarketPricer";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OptionMarketPricerInterface {
    return new utils.Interface(_abi) as OptionMarketPricerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OptionMarketPricer {
    return new Contract(address, _abi, signerOrProvider) as OptionMarketPricer;
  }
}
