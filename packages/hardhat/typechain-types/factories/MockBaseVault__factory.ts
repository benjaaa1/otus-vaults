/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockBaseVault, MockBaseVaultInterface } from "../MockBaseVault";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_roundDuration",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516101ac3803806101ac83398101604081905261002f9161008f565b600061006582610053620f42406301e1338061007060201b6100091790919060201c565b61008360201b61001a1790919060201c565b603355506100f79050565b600061007c82846100a8565b9392505050565b600061007c82846100d5565b6000602082840312156100a157600080fd5b5051919050565b60008160001904831182151516156100d057634e487b7160e01b600052601160045260246000fd5b500290565b6000826100f257634e487b7160e01b600052601260045260246000fd5b500490565b60a7806101056000396000f3fe6080604052600080fd5b6000601382846024565b9392505050565b6000601382846050565b6000816000190483118215151615604b57634e487b7160e01b600052601160045260246000fd5b500290565b600082606c57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220ef86758e097ab7aa49fadaa570fdd119c047ba954e60fffa231bcdcbfac8df3664736f6c63430008090033";

type MockBaseVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockBaseVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockBaseVault__factory extends ContractFactory {
  constructor(...args: MockBaseVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MockBaseVault";
  }

  deploy(
    _roundDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockBaseVault> {
    return super.deploy(
      _roundDuration,
      overrides || {}
    ) as Promise<MockBaseVault>;
  }
  getDeployTransaction(
    _roundDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_roundDuration, overrides || {});
  }
  attach(address: string): MockBaseVault {
    return super.attach(address) as MockBaseVault;
  }
  connect(signer: Signer): MockBaseVault__factory {
    return super.connect(signer) as MockBaseVault__factory;
  }
  static readonly contractName: "MockBaseVault";
  public readonly contractName: "MockBaseVault";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockBaseVaultInterface {
    return new utils.Interface(_abi) as MockBaseVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockBaseVault {
    return new Contract(address, _abi, signerOrProvider) as MockBaseVault;
  }
}
