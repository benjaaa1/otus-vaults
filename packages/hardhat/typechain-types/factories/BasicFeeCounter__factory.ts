/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BasicFeeCounter,
  BasicFeeCounterInterface,
} from "../BasicFeeCounter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "fees",
        type: "uint256",
      },
    ],
    name: "addFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "counter",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isTrusted",
        type: "bool",
      },
    ],
    name: "setTrustedCounter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "totalFeesPerMarket",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "trustedCounter",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6104ef8061007e6000396000f3fe608060405234801561001057600080fd5b506004361061006d5760003560e01c806313814e2a14610072578063715018a6146100875780637e673ead1461008f5780638da5cb5b146100cd578063a3dd4579146100ed578063e6a1292b14610120578063f2fde38b14610133575b600080fd5b610085610080366004610391565b610146565b005b6100856101e1565b6100ba61009d3660046103cd565b600260209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b6100d561021c565b6040516001600160a01b0390911681526020016100c4565b6101106100fb366004610400565b60016020526000908152604090205460ff1681565b60405190151581526020016100c4565b61008561012e366004610422565b61022b565b610085610141366004610400565b610285565b3360009081526001602052604090205460ff166101a05760405162461bcd60e51b81526020600482015260136024820152723737ba103a393ab9ba32b21031b7bab73a32b960691b60448201526064015b60405180910390fd5b6001600160a01b038084166000908152600260209081526040808320938616835292905290812080548392906101d790849061045e565b9091555050505050565b336101ea61021c565b6001600160a01b0316146102105760405162461bcd60e51b815260040161019790610484565b61021a6000610325565b565b6000546001600160a01b031690565b3361023461021c565b6001600160a01b03161461025a5760405162461bcd60e51b815260040161019790610484565b6001600160a01b03919091166000908152600160205260409020805460ff1916911515919091179055565b3361028e61021c565b6001600160a01b0316146102b45760405162461bcd60e51b815260040161019790610484565b6001600160a01b0381166103195760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610197565b61032281610325565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461038c57600080fd5b919050565b6000806000606084860312156103a657600080fd5b6103af84610375565b92506103bd60208501610375565b9150604084013590509250925092565b600080604083850312156103e057600080fd5b6103e983610375565b91506103f760208401610375565b90509250929050565b60006020828403121561041257600080fd5b61041b82610375565b9392505050565b6000806040838503121561043557600080fd5b61043e83610375565b91506020830135801515811461045357600080fd5b809150509250929050565b6000821982111561047f57634e487b7160e01b600052601160045260246000fd5b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea26469706673582212205c3f77b1c585d4e99810e0f38463e31a40d19b8cf6c58a428e85d8ac664effde64736f6c63430008090033";

type BasicFeeCounterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BasicFeeCounterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BasicFeeCounter__factory extends ContractFactory {
  constructor(...args: BasicFeeCounterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "BasicFeeCounter";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BasicFeeCounter> {
    return super.deploy(overrides || {}) as Promise<BasicFeeCounter>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BasicFeeCounter {
    return super.attach(address) as BasicFeeCounter;
  }
  connect(signer: Signer): BasicFeeCounter__factory {
    return super.connect(signer) as BasicFeeCounter__factory;
  }
  static readonly contractName: "BasicFeeCounter";
  public readonly contractName: "BasicFeeCounter";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BasicFeeCounterInterface {
    return new utils.Interface(_abi) as BasicFeeCounterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BasicFeeCounter {
    return new Contract(address, _abi, signerOrProvider) as BasicFeeCounter;
  }
}
