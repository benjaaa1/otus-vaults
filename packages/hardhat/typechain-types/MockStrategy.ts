/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface MockStrategyInterface extends utils.Interface {
  contractName: "MockStrategy";
  functions: {
    "boardId()": FunctionFragment;
    "collateral()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "premium()": FunctionFragment;
    "returnFundsAndClearStrikes()": FunctionFragment;
    "setBoard(uint256)": FunctionFragment;
    "setMockedTradeAmount(uint256,uint256)": FunctionFragment;
    "tradeCollateralAmount()": FunctionFragment;
    "tradePremiumAmount()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "boardId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "premium", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "returnFundsAndClearStrikes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBoard",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMockedTradeAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeCollateralAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradePremiumAmount",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "boardId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "premium", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "returnFundsAndClearStrikes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBoard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMockedTradeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeCollateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradePremiumAmount",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockStrategy extends BaseContract {
  contractName: "MockStrategy";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockStrategyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    boardId(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateral(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    premium(overrides?: CallOverrides): Promise<[string]>;

    returnFundsAndClearStrikes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBoard(
      _boardId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMockedTradeAmount(
      _premium: BigNumberish,
      _collateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tradeCollateralAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradePremiumAmount(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  boardId(overrides?: CallOverrides): Promise<BigNumber>;

  collateral(overrides?: CallOverrides): Promise<string>;

  initialize(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  premium(overrides?: CallOverrides): Promise<string>;

  returnFundsAndClearStrikes(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBoard(
    _boardId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMockedTradeAmount(
    _premium: BigNumberish,
    _collateral: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tradeCollateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

  tradePremiumAmount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    boardId(overrides?: CallOverrides): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<string>;

    initialize(_vault: string, overrides?: CallOverrides): Promise<void>;

    premium(overrides?: CallOverrides): Promise<string>;

    returnFundsAndClearStrikes(overrides?: CallOverrides): Promise<void>;

    setBoard(_boardId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setMockedTradeAmount(
      _premium: BigNumberish,
      _collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tradeCollateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

    tradePremiumAmount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    boardId(overrides?: CallOverrides): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    premium(overrides?: CallOverrides): Promise<BigNumber>;

    returnFundsAndClearStrikes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBoard(
      _boardId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMockedTradeAmount(
      _premium: BigNumberish,
      _collateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tradeCollateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

    tradePremiumAmount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    boardId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    premium(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    returnFundsAndClearStrikes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBoard(
      _boardId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMockedTradeAmount(
      _premium: BigNumberish,
      _collateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tradeCollateralAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tradePremiumAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
