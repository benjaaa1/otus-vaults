/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IVirtualSynthInterface extends utils.Interface {
  contractName: "IVirtualSynth";
  functions: {
    "balanceOfUnderlying(address)": FunctionFragment;
    "rate()": FunctionFragment;
    "readyToSettle()": FunctionFragment;
    "secsLeftInWaitingPeriod()": FunctionFragment;
    "settle(address)": FunctionFragment;
    "settled()": FunctionFragment;
    "synth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceOfUnderlying",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "rate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "readyToSettle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secsLeftInWaitingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "settle", values: [string]): string;
  encodeFunctionData(functionFragment: "settled", values?: undefined): string;
  encodeFunctionData(functionFragment: "synth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "balanceOfUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readyToSettle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secsLeftInWaitingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "synth", data: BytesLike): Result;

  events: {};
}

export interface IVirtualSynth extends BaseContract {
  contractName: "IVirtualSynth";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVirtualSynthInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOfUnderlying(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    readyToSettle(overrides?: CallOverrides): Promise<[boolean]>;

    secsLeftInWaitingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    settle(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settled(overrides?: CallOverrides): Promise<[boolean]>;

    synth(overrides?: CallOverrides): Promise<[string]>;
  };

  balanceOfUnderlying(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rate(overrides?: CallOverrides): Promise<BigNumber>;

  readyToSettle(overrides?: CallOverrides): Promise<boolean>;

  secsLeftInWaitingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  settle(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settled(overrides?: CallOverrides): Promise<boolean>;

  synth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    balanceOfUnderlying(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    readyToSettle(overrides?: CallOverrides): Promise<boolean>;

    secsLeftInWaitingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    settle(account: string, overrides?: CallOverrides): Promise<void>;

    settled(overrides?: CallOverrides): Promise<boolean>;

    synth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    balanceOfUnderlying(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    readyToSettle(overrides?: CallOverrides): Promise<BigNumber>;

    secsLeftInWaitingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    settle(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settled(overrides?: CallOverrides): Promise<BigNumber>;

    synth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOfUnderlying(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    readyToSettle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    secsLeftInWaitingPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settle(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    synth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
