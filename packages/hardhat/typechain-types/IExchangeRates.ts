/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IExchangeRatesInterface extends utils.Interface {
  contractName: "IExchangeRates";
  functions: {
    "aggregatorWarningFlags()": FunctionFragment;
    "aggregators(bytes32)": FunctionFragment;
    "anyRateIsInvalid(bytes32[])": FunctionFragment;
    "anyRateIsInvalidAtRound(bytes32[],uint256[])": FunctionFragment;
    "currenciesUsingAggregator(address)": FunctionFragment;
    "effectiveAtomicValueAndRates(bytes32,uint256,bytes32)": FunctionFragment;
    "effectiveValue(bytes32,uint256,bytes32)": FunctionFragment;
    "effectiveValueAndRates(bytes32,uint256,bytes32)": FunctionFragment;
    "effectiveValueAndRatesAtRound(bytes32,uint256,bytes32,uint256,uint256)": FunctionFragment;
    "getCurrentRoundId(bytes32)": FunctionFragment;
    "getLastRoundIdBeforeElapsedSecs(bytes32,uint256,uint256,uint256)": FunctionFragment;
    "lastRateUpdateTimes(bytes32)": FunctionFragment;
    "rateAndInvalid(bytes32)": FunctionFragment;
    "rateAndTimestampAtRound(bytes32,uint256)": FunctionFragment;
    "rateAndUpdatedTime(bytes32)": FunctionFragment;
    "rateForCurrency(bytes32)": FunctionFragment;
    "rateIsFlagged(bytes32)": FunctionFragment;
    "rateIsInvalid(bytes32)": FunctionFragment;
    "rateIsStale(bytes32)": FunctionFragment;
    "rateStalePeriod()": FunctionFragment;
    "ratesAndInvalidForCurrencies(bytes32[])": FunctionFragment;
    "ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32,uint256,uint256)": FunctionFragment;
    "ratesForCurrencies(bytes32[])": FunctionFragment;
    "synthTooVolatileForAtomicExchange(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "aggregatorWarningFlags",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aggregators",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "anyRateIsInvalid",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "anyRateIsInvalidAtRound",
    values: [BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "currenciesUsingAggregator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "effectiveAtomicValueAndRates",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "effectiveValue",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "effectiveValueAndRates",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "effectiveValueAndRatesAtRound",
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRoundId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRoundIdBeforeElapsedSecs",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRateUpdateTimes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rateAndInvalid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rateAndTimestampAtRound",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rateAndUpdatedTime",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rateForCurrency",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rateIsFlagged",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rateIsInvalid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rateIsStale",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rateStalePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ratesAndInvalidForCurrencies",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "ratesAndUpdatedTimeForCurrencyLastNRounds",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ratesForCurrencies",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "synthTooVolatileForAtomicExchange",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "aggregatorWarningFlags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anyRateIsInvalid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anyRateIsInvalidAtRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currenciesUsingAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "effectiveAtomicValueAndRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "effectiveValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "effectiveValueAndRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "effectiveValueAndRatesAtRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastRoundIdBeforeElapsedSecs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRateUpdateTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateAndInvalid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateAndTimestampAtRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateAndUpdatedTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateForCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateIsFlagged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateIsInvalid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateIsStale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateStalePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ratesAndInvalidForCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ratesAndUpdatedTimeForCurrencyLastNRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ratesForCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "synthTooVolatileForAtomicExchange",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IExchangeRates extends BaseContract {
  contractName: "IExchangeRates";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IExchangeRatesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aggregatorWarningFlags(overrides?: CallOverrides): Promise<[string]>;

    aggregators(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    anyRateIsInvalid(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    anyRateIsInvalidAtRound(
      currencyKeys: BytesLike[],
      roundIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    currenciesUsingAggregator(
      aggregator: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    effectiveAtomicValueAndRates(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        systemValue: BigNumber;
        systemSourceRate: BigNumber;
        systemDestinationRate: BigNumber;
      }
    >;

    effectiveValue(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    effectiveValueAndRates(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        sourceRate: BigNumber;
        destinationRate: BigNumber;
      }
    >;

    effectiveValueAndRatesAtRound(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      roundIdForSrc: BigNumberish,
      roundIdForDest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        sourceRate: BigNumber;
        destinationRate: BigNumber;
      }
    >;

    getCurrentRoundId(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLastRoundIdBeforeElapsedSecs(
      currencyKey: BytesLike,
      startingRoundId: BigNumberish,
      startingTimestamp: BigNumberish,
      timediff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastRateUpdateTimes(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rateAndInvalid(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { rate: BigNumber; isInvalid: boolean }>;

    rateAndTimestampAtRound(
      currencyKey: BytesLike,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>;

    rateAndUpdatedTime(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>;

    rateForCurrency(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rateIsFlagged(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rateIsInvalid(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rateIsStale(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rateStalePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    ratesAndInvalidForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], boolean] & { rates: BigNumber[]; anyRateInvalid: boolean }
    >;

    ratesAndUpdatedTimeForCurrencyLastNRounds(
      currencyKey: BytesLike,
      numRounds: BigNumberish,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & { rates: BigNumber[]; times: BigNumber[] }
    >;

    ratesForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    synthTooVolatileForAtomicExchange(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  aggregatorWarningFlags(overrides?: CallOverrides): Promise<string>;

  aggregators(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  anyRateIsInvalid(
    currencyKeys: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  anyRateIsInvalidAtRound(
    currencyKeys: BytesLike[],
    roundIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  currenciesUsingAggregator(
    aggregator: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  effectiveAtomicValueAndRates(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      value: BigNumber;
      systemValue: BigNumber;
      systemSourceRate: BigNumber;
      systemDestinationRate: BigNumber;
    }
  >;

  effectiveValue(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  effectiveValueAndRates(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      value: BigNumber;
      sourceRate: BigNumber;
      destinationRate: BigNumber;
    }
  >;

  effectiveValueAndRatesAtRound(
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    roundIdForSrc: BigNumberish,
    roundIdForDest: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      value: BigNumber;
      sourceRate: BigNumber;
      destinationRate: BigNumber;
    }
  >;

  getCurrentRoundId(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLastRoundIdBeforeElapsedSecs(
    currencyKey: BytesLike,
    startingRoundId: BigNumberish,
    startingTimestamp: BigNumberish,
    timediff: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastRateUpdateTimes(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rateAndInvalid(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { rate: BigNumber; isInvalid: boolean }>;

  rateAndTimestampAtRound(
    currencyKey: BytesLike,
    roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>;

  rateAndUpdatedTime(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>;

  rateForCurrency(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rateIsFlagged(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rateIsInvalid(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rateIsStale(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rateStalePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  ratesAndInvalidForCurrencies(
    currencyKeys: BytesLike[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], boolean] & { rates: BigNumber[]; anyRateInvalid: boolean }
  >;

  ratesAndUpdatedTimeForCurrencyLastNRounds(
    currencyKey: BytesLike,
    numRounds: BigNumberish,
    roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[]] & { rates: BigNumber[]; times: BigNumber[] }
  >;

  ratesForCurrencies(
    currencyKeys: BytesLike[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  synthTooVolatileForAtomicExchange(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    aggregatorWarningFlags(overrides?: CallOverrides): Promise<string>;

    aggregators(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    anyRateIsInvalid(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    anyRateIsInvalidAtRound(
      currencyKeys: BytesLike[],
      roundIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    currenciesUsingAggregator(
      aggregator: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    effectiveAtomicValueAndRates(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        systemValue: BigNumber;
        systemSourceRate: BigNumber;
        systemDestinationRate: BigNumber;
      }
    >;

    effectiveValue(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    effectiveValueAndRates(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        sourceRate: BigNumber;
        destinationRate: BigNumber;
      }
    >;

    effectiveValueAndRatesAtRound(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      roundIdForSrc: BigNumberish,
      roundIdForDest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        sourceRate: BigNumber;
        destinationRate: BigNumber;
      }
    >;

    getCurrentRoundId(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastRoundIdBeforeElapsedSecs(
      currencyKey: BytesLike,
      startingRoundId: BigNumberish,
      startingTimestamp: BigNumberish,
      timediff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRateUpdateTimes(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateAndInvalid(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { rate: BigNumber; isInvalid: boolean }>;

    rateAndTimestampAtRound(
      currencyKey: BytesLike,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>;

    rateAndUpdatedTime(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { rate: BigNumber; time: BigNumber }>;

    rateForCurrency(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateIsFlagged(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rateIsInvalid(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rateIsStale(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rateStalePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    ratesAndInvalidForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], boolean] & { rates: BigNumber[]; anyRateInvalid: boolean }
    >;

    ratesAndUpdatedTimeForCurrencyLastNRounds(
      currencyKey: BytesLike,
      numRounds: BigNumberish,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & { rates: BigNumber[]; times: BigNumber[] }
    >;

    ratesForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    synthTooVolatileForAtomicExchange(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    aggregatorWarningFlags(overrides?: CallOverrides): Promise<BigNumber>;

    aggregators(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    anyRateIsInvalid(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    anyRateIsInvalidAtRound(
      currencyKeys: BytesLike[],
      roundIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currenciesUsingAggregator(
      aggregator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    effectiveAtomicValueAndRates(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    effectiveValue(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    effectiveValueAndRates(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    effectiveValueAndRatesAtRound(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      roundIdForSrc: BigNumberish,
      roundIdForDest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentRoundId(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastRoundIdBeforeElapsedSecs(
      currencyKey: BytesLike,
      startingRoundId: BigNumberish,
      startingTimestamp: BigNumberish,
      timediff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRateUpdateTimes(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateAndInvalid(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateAndTimestampAtRound(
      currencyKey: BytesLike,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateAndUpdatedTime(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateForCurrency(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateIsFlagged(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateIsInvalid(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateIsStale(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateStalePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    ratesAndInvalidForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ratesAndUpdatedTimeForCurrencyLastNRounds(
      currencyKey: BytesLike,
      numRounds: BigNumberish,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ratesForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    synthTooVolatileForAtomicExchange(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aggregatorWarningFlags(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aggregators(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    anyRateIsInvalid(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    anyRateIsInvalidAtRound(
      currencyKeys: BytesLike[],
      roundIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currenciesUsingAggregator(
      aggregator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    effectiveAtomicValueAndRates(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    effectiveValue(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    effectiveValueAndRates(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    effectiveValueAndRatesAtRound(
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      roundIdForSrc: BigNumberish,
      roundIdForDest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentRoundId(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastRoundIdBeforeElapsedSecs(
      currencyKey: BytesLike,
      startingRoundId: BigNumberish,
      startingTimestamp: BigNumberish,
      timediff: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRateUpdateTimes(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateAndInvalid(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateAndTimestampAtRound(
      currencyKey: BytesLike,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateAndUpdatedTime(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateForCurrency(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateIsFlagged(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateIsInvalid(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateIsStale(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateStalePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ratesAndInvalidForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ratesAndUpdatedTimeForCurrencyLastNRounds(
      currencyKey: BytesLike,
      numRounds: BigNumberish,
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ratesForCurrencies(
      currencyKeys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    synthTooVolatileForAtomicExchange(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
