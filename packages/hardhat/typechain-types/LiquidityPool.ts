/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace LiquidityPool {
  export type LiquidityPoolParametersStruct = {
    minDepositWithdraw: BigNumberish;
    depositDelay: BigNumberish;
    withdrawalDelay: BigNumberish;
    withdrawalFee: BigNumberish;
    liquidityCBThreshold: BigNumberish;
    liquidityCBTimeout: BigNumberish;
    ivVarianceCBThreshold: BigNumberish;
    skewVarianceCBThreshold: BigNumberish;
    ivVarianceCBTimeout: BigNumberish;
    skewVarianceCBTimeout: BigNumberish;
    guardianMultisig: string;
    guardianDelay: BigNumberish;
    boardSettlementCBTimeout: BigNumberish;
  };

  export type LiquidityPoolParametersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    minDepositWithdraw: BigNumber;
    depositDelay: BigNumber;
    withdrawalDelay: BigNumber;
    withdrawalFee: BigNumber;
    liquidityCBThreshold: BigNumber;
    liquidityCBTimeout: BigNumber;
    ivVarianceCBThreshold: BigNumber;
    skewVarianceCBThreshold: BigNumber;
    ivVarianceCBTimeout: BigNumber;
    skewVarianceCBTimeout: BigNumber;
    guardianMultisig: string;
    guardianDelay: BigNumber;
    boardSettlementCBTimeout: BigNumber;
  };

  export type LiquidityStruct = {
    freeLiquidity: BigNumberish;
    burnableLiquidity: BigNumberish;
    usedCollatLiquidity: BigNumberish;
    pendingDeltaLiquidity: BigNumberish;
    usedDeltaLiquidity: BigNumberish;
    NAV: BigNumberish;
  };

  export type LiquidityStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    freeLiquidity: BigNumber;
    burnableLiquidity: BigNumber;
    usedCollatLiquidity: BigNumber;
    pendingDeltaLiquidity: BigNumber;
    usedDeltaLiquidity: BigNumber;
    NAV: BigNumber;
  };
}

export declare namespace SynthetixAdapter {
  export type ExchangeParamsStruct = {
    spotPrice: BigNumberish;
    quoteKey: BytesLike;
    baseKey: BytesLike;
    short: string;
    quoteBaseFeeRate: BigNumberish;
    baseQuoteFeeRate: BigNumberish;
  };

  export type ExchangeParamsStructOutput = [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    spotPrice: BigNumber;
    quoteKey: string;
    baseKey: string;
    short: string;
    quoteBaseFeeRate: BigNumber;
    baseQuoteFeeRate: BigNumber;
  };
}

export interface LiquidityPoolInterface extends utils.Interface {
  contractName: "LiquidityPool";
  functions: {
    "CBTimestamp()": FunctionFragment;
    "boardSettlement(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "freeQuoteCollateralAndSendPremium(uint256,address,uint256,uint256)": FunctionFragment;
    "getLiquidity(uint256,address)": FunctionFragment;
    "getLpParams()": FunctionFragment;
    "getTokenPrice()": FunctionFragment;
    "getTotalPoolValueQuote()": FunctionFragment;
    "getTotalTokenSupply()": FunctionFragment;
    "init(address,address,address,address,address,address,address,address)": FunctionFragment;
    "initialized()": FunctionFragment;
    "initiateDeposit(address,uint256)": FunctionFragment;
    "initiateWithdraw(address,uint256)": FunctionFragment;
    "insolventSettlementAmount()": FunctionFragment;
    "liquidateBaseAndSendPremium(uint256,address,uint256,uint256)": FunctionFragment;
    "liquidationInsolventAmount()": FunctionFragment;
    "lockBase(uint256,(uint256,bytes32,bytes32,address,uint256,uint256),uint256)": FunctionFragment;
    "lockQuote(uint256,uint256)": FunctionFragment;
    "lockedCollateral()": FunctionFragment;
    "lpParams()": FunctionFragment;
    "nextQueuedDepositId()": FunctionFragment;
    "nextQueuedWithdrawalId()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolHedger()": FunctionFragment;
    "processDepositQueue(uint256)": FunctionFragment;
    "processWithdrawalQueue(uint256)": FunctionFragment;
    "queuedDepositHead()": FunctionFragment;
    "queuedDeposits(uint256)": FunctionFragment;
    "queuedWithdrawalHead()": FunctionFragment;
    "queuedWithdrawals(uint256)": FunctionFragment;
    "reclaimInsolventBase((uint256,bytes32,bytes32,address,uint256,uint256),uint256)": FunctionFragment;
    "reclaimInsolventQuote((uint256,bytes32,bytes32,address,uint256,uint256),uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sendSettlementValue(address,uint256)": FunctionFragment;
    "sendShortPremium(address,uint256,uint256,uint256)": FunctionFragment;
    "setLiquidityPoolParameters((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256))": FunctionFragment;
    "setPoolHedger(address)": FunctionFragment;
    "totalOutstandingSettlements()": FunctionFragment;
    "totalQueuedDeposits()": FunctionFragment;
    "totalQueuedWithdrawals()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferQuoteToHedge((uint256,bytes32,bytes32,address,uint256,uint256),uint256)": FunctionFragment;
    "updateCBs()": FunctionFragment;
    "updateLiquidationInsolvency(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CBTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "boardSettlement",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "freeQuoteCollateralAndSendPremium",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidity",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPoolValueQuote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTokenSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiateDeposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateWithdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insolventSettlementAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateBaseAndSendPremium",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationInsolventAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockBase",
    values: [BigNumberish, SynthetixAdapter.ExchangeParamsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockQuote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpParams", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextQueuedDepositId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextQueuedWithdrawalId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolHedger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processDepositQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processWithdrawalQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queuedDepositHead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queuedDeposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queuedWithdrawalHead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queuedWithdrawals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reclaimInsolventBase",
    values: [SynthetixAdapter.ExchangeParamsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reclaimInsolventQuote",
    values: [SynthetixAdapter.ExchangeParamsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendSettlementValue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendShortPremium",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityPoolParameters",
    values: [LiquidityPool.LiquidityPoolParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolHedger",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalOutstandingSettlements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalQueuedDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalQueuedWithdrawals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferQuoteToHedge",
    values: [SynthetixAdapter.ExchangeParamsStruct, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "updateCBs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateLiquidationInsolvency",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CBTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boardSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freeQuoteCollateralAndSendPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPoolValueQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTokenSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insolventSettlementAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateBaseAndSendPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationInsolventAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockBase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockQuote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextQueuedDepositId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextQueuedWithdrawalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolHedger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processDepositQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processWithdrawalQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedDepositHead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedWithdrawalHead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reclaimInsolventBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reclaimInsolventQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendSettlementValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendShortPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityPoolParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolHedger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalOutstandingSettlements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalQueuedDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalQueuedWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferQuoteToHedge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateCBs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateLiquidationInsolvency",
    data: BytesLike
  ): Result;

  events: {
    "BaseFreed(uint256,uint256)": EventFragment;
    "BaseLiquidated(uint256,uint256)": EventFragment;
    "BaseLocked(uint256,uint256)": EventFragment;
    "BoardSettlement(uint256,uint256,uint256)": EventFragment;
    "BoardSettlementCircuitBreakerUpdated(uint256)": EventFragment;
    "CheckingCanProcess(uint256,bool,bool,bool,bool)": EventFragment;
    "CircuitBreakerUpdated(uint256,bool,bool,bool)": EventFragment;
    "DepositProcessed(address,uint256,uint256,uint256,uint256)": EventFragment;
    "DepositQueued(address,uint256,uint256,uint256,uint256)": EventFragment;
    "LiquidityPoolParametersUpdated(tuple)": EventFragment;
    "OutstandingSettlementSent(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolHedgerUpdated(address)": EventFragment;
    "PremiumTransferred(address,uint256,uint256)": EventFragment;
    "QuoteFreed(uint256,uint256)": EventFragment;
    "QuoteLocked(uint256,uint256)": EventFragment;
    "QuoteTransferredToPoolHedger(uint256)": EventFragment;
    "WithdrawPartiallyProcessed(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "WithdrawProcessed(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "WithdrawQueued(address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BaseFreed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoardSettlement"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BoardSettlementCircuitBreakerUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CheckingCanProcess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CircuitBreakerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositQueued"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidityPoolParametersUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OutstandingSettlementSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolHedgerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PremiumTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteFreed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteLocked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "QuoteTransferredToPoolHedger"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawPartiallyProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawQueued"): EventFragment;
}

export type BaseFreedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { baseFreed: BigNumber; lockedCollateralBase: BigNumber }
>;

export type BaseFreedEventFilter = TypedEventFilter<BaseFreedEvent>;

export type BaseLiquidatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { amountBase: BigNumber; quoteReceived: BigNumber }
>;

export type BaseLiquidatedEventFilter = TypedEventFilter<BaseLiquidatedEvent>;

export type BaseLockedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { baseLocked: BigNumber; lockedCollateralBase: BigNumber }
>;

export type BaseLockedEventFilter = TypedEventFilter<BaseLockedEvent>;

export type BoardSettlementEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  {
    insolventSettlementAmount: BigNumber;
    amountQuoteReserved: BigNumber;
    totalOutstandingSettlements: BigNumber;
  }
>;

export type BoardSettlementEventFilter = TypedEventFilter<BoardSettlementEvent>;

export type BoardSettlementCircuitBreakerUpdatedEvent = TypedEvent<
  [BigNumber],
  { newTimestamp: BigNumber }
>;

export type BoardSettlementCircuitBreakerUpdatedEventFilter =
  TypedEventFilter<BoardSettlementCircuitBreakerUpdatedEvent>;

export type CheckingCanProcessEvent = TypedEvent<
  [BigNumber, boolean, boolean, boolean, boolean],
  {
    processId: BigNumber;
    boardNotStale: boolean;
    validEntry: boolean;
    guardianBypass: boolean;
    delaysExpired: boolean;
  }
>;

export type CheckingCanProcessEventFilter =
  TypedEventFilter<CheckingCanProcessEvent>;

export type CircuitBreakerUpdatedEvent = TypedEvent<
  [BigNumber, boolean, boolean, boolean],
  {
    newTimestamp: BigNumber;
    ivVarianceThresholdCrossed: boolean;
    skewVarianceThresholdCrossed: boolean;
    liquidityThresholdCrossed: boolean;
  }
>;

export type CircuitBreakerUpdatedEventFilter =
  TypedEventFilter<CircuitBreakerUpdatedEvent>;

export type DepositProcessedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    beneficiary: string;
    depositQueueId: BigNumber;
    amountDeposited: BigNumber;
    tokenPrice: BigNumber;
    tokensReceived: BigNumber;
  }
>;

export type DepositProcessedEventFilter =
  TypedEventFilter<DepositProcessedEvent>;

export type DepositQueuedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    beneficiary: string;
    amountDeposited: BigNumber;
    queuedDepositId: BigNumber;
    depositInitiatedTime: BigNumber;
    totalQueuedDeposits: BigNumber;
  }
>;

export type DepositQueuedEventFilter = TypedEventFilter<DepositQueuedEvent>;

export type LiquidityPoolParametersUpdatedEvent = TypedEvent<
  [LiquidityPool.LiquidityPoolParametersStructOutput],
  { lpParams: LiquidityPool.LiquidityPoolParametersStructOutput }
>;

export type LiquidityPoolParametersUpdatedEventFilter =
  TypedEventFilter<LiquidityPoolParametersUpdatedEvent>;

export type OutstandingSettlementSentEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; amount: BigNumber; totalOutstandingSettlements: BigNumber }
>;

export type OutstandingSettlementSentEventFilter =
  TypedEventFilter<OutstandingSettlementSentEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PoolHedgerUpdatedEvent = TypedEvent<
  [string],
  { poolHedger: string }
>;

export type PoolHedgerUpdatedEventFilter =
  TypedEventFilter<PoolHedgerUpdatedEvent>;

export type PremiumTransferredEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  {
    recipient: string;
    recipientPortion: BigNumber;
    optionMarketPortion: BigNumber;
  }
>;

export type PremiumTransferredEventFilter =
  TypedEventFilter<PremiumTransferredEvent>;

export type QuoteFreedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { quoteFreed: BigNumber; lockedCollateralQuote: BigNumber }
>;

export type QuoteFreedEventFilter = TypedEventFilter<QuoteFreedEvent>;

export type QuoteLockedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { quoteLocked: BigNumber; lockedCollateralQuote: BigNumber }
>;

export type QuoteLockedEventFilter = TypedEventFilter<QuoteLockedEvent>;

export type QuoteTransferredToPoolHedgerEvent = TypedEvent<
  [BigNumber],
  { amountQuote: BigNumber }
>;

export type QuoteTransferredToPoolHedgerEventFilter =
  TypedEventFilter<QuoteTransferredToPoolHedgerEvent>;

export type WithdrawPartiallyProcessedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    beneficiary: string;
    withdrawalQueueId: BigNumber;
    amountWithdrawn: BigNumber;
    tokenPrice: BigNumber;
    quoteReceived: BigNumber;
    totalQueuedWithdrawals: BigNumber;
  }
>;

export type WithdrawPartiallyProcessedEventFilter =
  TypedEventFilter<WithdrawPartiallyProcessedEvent>;

export type WithdrawProcessedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    beneficiary: string;
    withdrawalQueueId: BigNumber;
    amountWithdrawn: BigNumber;
    tokenPrice: BigNumber;
    quoteReceived: BigNumber;
    totalQueuedWithdrawals: BigNumber;
  }
>;

export type WithdrawProcessedEventFilter =
  TypedEventFilter<WithdrawProcessedEvent>;

export type WithdrawQueuedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    beneficiary: string;
    amountWithdrawn: BigNumber;
    queuedWithdrawalId: BigNumber;
    withdrawalInitiatedTime: BigNumber;
    totalQueuedWithdrawals: BigNumber;
  }
>;

export type WithdrawQueuedEventFilter = TypedEventFilter<WithdrawQueuedEvent>;

export interface LiquidityPool extends BaseContract {
  contractName: "LiquidityPool";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidityPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CBTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    boardSettlement(
      insolventSettlements: BigNumberish,
      amountQuoteFreed: BigNumberish,
      amountQuoteReserved: BigNumberish,
      amountBaseLiquidated: BigNumberish,
      amountBaseFreed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freeQuoteCollateralAndSendPremium(
      amountQuoteFreed: BigNumberish,
      recipient: string,
      totalCost: BigNumberish,
      reservedFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLiquidity(
      basePrice: BigNumberish,
      short: string,
      overrides?: CallOverrides
    ): Promise<[LiquidityPool.LiquidityStructOutput]>;

    getLpParams(
      overrides?: CallOverrides
    ): Promise<[LiquidityPool.LiquidityPoolParametersStructOutput]>;

    getTokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalPoolValueQuote(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalTokenSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    init(
      _synthetixAdapter: string,
      _optionMarket: string,
      _liquidityTokens: string,
      _greekCache: string,
      _poolHedger: string,
      _shortCollateral: string,
      _quoteAsset: string,
      _baseAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    initiateDeposit(
      beneficiary: string,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initiateWithdraw(
      beneficiary: string,
      amountLiquidityTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    insolventSettlementAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidateBaseAndSendPremium(
      amountBase: BigNumberish,
      recipient: string,
      totalCost: BigNumberish,
      reservedFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidationInsolventAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockBase(
      amount: BigNumberish,
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      freeLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockQuote(
      amount: BigNumberish,
      freeLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockedCollateral(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { quote: BigNumber; base: BigNumber }>;

    lpParams(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber
      ] & {
        minDepositWithdraw: BigNumber;
        depositDelay: BigNumber;
        withdrawalDelay: BigNumber;
        withdrawalFee: BigNumber;
        liquidityCBThreshold: BigNumber;
        liquidityCBTimeout: BigNumber;
        ivVarianceCBThreshold: BigNumber;
        skewVarianceCBThreshold: BigNumber;
        ivVarianceCBTimeout: BigNumber;
        skewVarianceCBTimeout: BigNumber;
        guardianMultisig: string;
        guardianDelay: BigNumber;
        boardSettlementCBTimeout: BigNumber;
      }
    >;

    nextQueuedDepositId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextQueuedWithdrawalId(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolHedger(overrides?: CallOverrides): Promise<[string]>;

    processDepositQueue(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    processWithdrawalQueue(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    queuedDepositHead(overrides?: CallOverrides): Promise<[BigNumber]>;

    queuedDeposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber] & {
        id: BigNumber;
        beneficiary: string;
        amountLiquidity: BigNumber;
        depositInitiatedTime: BigNumber;
      }
    >;

    queuedWithdrawalHead(overrides?: CallOverrides): Promise<[BigNumber]>;

    queuedWithdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber] & {
        id: BigNumber;
        beneficiary: string;
        amountTokens: BigNumber;
        withdrawInitiatedTime: BigNumber;
      }
    >;

    reclaimInsolventBase(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      amountBase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reclaimInsolventQuote(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendSettlementValue(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendShortPremium(
      recipient: string,
      premium: BigNumberish,
      freeLiquidity: BigNumberish,
      reservedFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityPoolParameters(
      _lpParams: LiquidityPool.LiquidityPoolParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolHedger(
      newPoolHedger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalOutstandingSettlements(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalQueuedDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalQueuedWithdrawals(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferQuoteToHedge(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCBs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLiquidationInsolvency(
      insolvencyAmountInQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CBTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  boardSettlement(
    insolventSettlements: BigNumberish,
    amountQuoteFreed: BigNumberish,
    amountQuoteReserved: BigNumberish,
    amountBaseLiquidated: BigNumberish,
    amountBaseFreed: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freeQuoteCollateralAndSendPremium(
    amountQuoteFreed: BigNumberish,
    recipient: string,
    totalCost: BigNumberish,
    reservedFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLiquidity(
    basePrice: BigNumberish,
    short: string,
    overrides?: CallOverrides
  ): Promise<LiquidityPool.LiquidityStructOutput>;

  getLpParams(
    overrides?: CallOverrides
  ): Promise<LiquidityPool.LiquidityPoolParametersStructOutput>;

  getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalPoolValueQuote(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

  init(
    _synthetixAdapter: string,
    _optionMarket: string,
    _liquidityTokens: string,
    _greekCache: string,
    _poolHedger: string,
    _shortCollateral: string,
    _quoteAsset: string,
    _baseAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  initiateDeposit(
    beneficiary: string,
    amountQuote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initiateWithdraw(
    beneficiary: string,
    amountLiquidityTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  insolventSettlementAmount(overrides?: CallOverrides): Promise<BigNumber>;

  liquidateBaseAndSendPremium(
    amountBase: BigNumberish,
    recipient: string,
    totalCost: BigNumberish,
    reservedFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidationInsolventAmount(overrides?: CallOverrides): Promise<BigNumber>;

  lockBase(
    amount: BigNumberish,
    exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
    freeLiquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockQuote(
    amount: BigNumberish,
    freeLiquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockedCollateral(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { quote: BigNumber; base: BigNumber }>;

  lpParams(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber
    ] & {
      minDepositWithdraw: BigNumber;
      depositDelay: BigNumber;
      withdrawalDelay: BigNumber;
      withdrawalFee: BigNumber;
      liquidityCBThreshold: BigNumber;
      liquidityCBTimeout: BigNumber;
      ivVarianceCBThreshold: BigNumber;
      skewVarianceCBThreshold: BigNumber;
      ivVarianceCBTimeout: BigNumber;
      skewVarianceCBTimeout: BigNumber;
      guardianMultisig: string;
      guardianDelay: BigNumber;
      boardSettlementCBTimeout: BigNumber;
    }
  >;

  nextQueuedDepositId(overrides?: CallOverrides): Promise<BigNumber>;

  nextQueuedWithdrawalId(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolHedger(overrides?: CallOverrides): Promise<string>;

  processDepositQueue(
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  processWithdrawalQueue(
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  queuedDepositHead(overrides?: CallOverrides): Promise<BigNumber>;

  queuedDeposits(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber] & {
      id: BigNumber;
      beneficiary: string;
      amountLiquidity: BigNumber;
      depositInitiatedTime: BigNumber;
    }
  >;

  queuedWithdrawalHead(overrides?: CallOverrides): Promise<BigNumber>;

  queuedWithdrawals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber] & {
      id: BigNumber;
      beneficiary: string;
      amountTokens: BigNumber;
      withdrawInitiatedTime: BigNumber;
    }
  >;

  reclaimInsolventBase(
    exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
    amountBase: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reclaimInsolventQuote(
    exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
    amountQuote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendSettlementValue(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendShortPremium(
    recipient: string,
    premium: BigNumberish,
    freeLiquidity: BigNumberish,
    reservedFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityPoolParameters(
    _lpParams: LiquidityPool.LiquidityPoolParametersStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolHedger(
    newPoolHedger: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalOutstandingSettlements(overrides?: CallOverrides): Promise<BigNumber>;

  totalQueuedDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  totalQueuedWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferQuoteToHedge(
    exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCBs(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLiquidationInsolvency(
    insolvencyAmountInQuote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CBTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    boardSettlement(
      insolventSettlements: BigNumberish,
      amountQuoteFreed: BigNumberish,
      amountQuoteReserved: BigNumberish,
      amountBaseLiquidated: BigNumberish,
      amountBaseFreed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    freeQuoteCollateralAndSendPremium(
      amountQuoteFreed: BigNumberish,
      recipient: string,
      totalCost: BigNumberish,
      reservedFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getLiquidity(
      basePrice: BigNumberish,
      short: string,
      overrides?: CallOverrides
    ): Promise<LiquidityPool.LiquidityStructOutput>;

    getLpParams(
      overrides?: CallOverrides
    ): Promise<LiquidityPool.LiquidityPoolParametersStructOutput>;

    getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPoolValueQuote(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _synthetixAdapter: string,
      _optionMarket: string,
      _liquidityTokens: string,
      _greekCache: string,
      _poolHedger: string,
      _shortCollateral: string,
      _quoteAsset: string,
      _baseAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    initiateDeposit(
      beneficiary: string,
      amountQuote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateWithdraw(
      beneficiary: string,
      amountLiquidityTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    insolventSettlementAmount(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateBaseAndSendPremium(
      amountBase: BigNumberish,
      recipient: string,
      totalCost: BigNumberish,
      reservedFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidationInsolventAmount(overrides?: CallOverrides): Promise<BigNumber>;

    lockBase(
      amount: BigNumberish,
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      freeLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockQuote(
      amount: BigNumberish,
      freeLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockedCollateral(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { quote: BigNumber; base: BigNumber }>;

    lpParams(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber
      ] & {
        minDepositWithdraw: BigNumber;
        depositDelay: BigNumber;
        withdrawalDelay: BigNumber;
        withdrawalFee: BigNumber;
        liquidityCBThreshold: BigNumber;
        liquidityCBTimeout: BigNumber;
        ivVarianceCBThreshold: BigNumber;
        skewVarianceCBThreshold: BigNumber;
        ivVarianceCBTimeout: BigNumber;
        skewVarianceCBTimeout: BigNumber;
        guardianMultisig: string;
        guardianDelay: BigNumber;
        boardSettlementCBTimeout: BigNumber;
      }
    >;

    nextQueuedDepositId(overrides?: CallOverrides): Promise<BigNumber>;

    nextQueuedWithdrawalId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolHedger(overrides?: CallOverrides): Promise<string>;

    processDepositQueue(
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    processWithdrawalQueue(
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    queuedDepositHead(overrides?: CallOverrides): Promise<BigNumber>;

    queuedDeposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber] & {
        id: BigNumber;
        beneficiary: string;
        amountLiquidity: BigNumber;
        depositInitiatedTime: BigNumber;
      }
    >;

    queuedWithdrawalHead(overrides?: CallOverrides): Promise<BigNumber>;

    queuedWithdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber] & {
        id: BigNumber;
        beneficiary: string;
        amountTokens: BigNumber;
        withdrawInitiatedTime: BigNumber;
      }
    >;

    reclaimInsolventBase(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      amountBase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reclaimInsolventQuote(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      amountQuote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sendSettlementValue(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendShortPremium(
      recipient: string,
      premium: BigNumberish,
      freeLiquidity: BigNumberish,
      reservedFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityPoolParameters(
      _lpParams: LiquidityPool.LiquidityPoolParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolHedger(
      newPoolHedger: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalOutstandingSettlements(overrides?: CallOverrides): Promise<BigNumber>;

    totalQueuedDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    totalQueuedWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferQuoteToHedge(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateCBs(overrides?: CallOverrides): Promise<void>;

    updateLiquidationInsolvency(
      insolvencyAmountInQuote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BaseFreed(uint256,uint256)"(
      baseFreed?: null,
      lockedCollateralBase?: null
    ): BaseFreedEventFilter;
    BaseFreed(
      baseFreed?: null,
      lockedCollateralBase?: null
    ): BaseFreedEventFilter;

    "BaseLiquidated(uint256,uint256)"(
      amountBase?: null,
      quoteReceived?: null
    ): BaseLiquidatedEventFilter;
    BaseLiquidated(
      amountBase?: null,
      quoteReceived?: null
    ): BaseLiquidatedEventFilter;

    "BaseLocked(uint256,uint256)"(
      baseLocked?: null,
      lockedCollateralBase?: null
    ): BaseLockedEventFilter;
    BaseLocked(
      baseLocked?: null,
      lockedCollateralBase?: null
    ): BaseLockedEventFilter;

    "BoardSettlement(uint256,uint256,uint256)"(
      insolventSettlementAmount?: null,
      amountQuoteReserved?: null,
      totalOutstandingSettlements?: null
    ): BoardSettlementEventFilter;
    BoardSettlement(
      insolventSettlementAmount?: null,
      amountQuoteReserved?: null,
      totalOutstandingSettlements?: null
    ): BoardSettlementEventFilter;

    "BoardSettlementCircuitBreakerUpdated(uint256)"(
      newTimestamp?: null
    ): BoardSettlementCircuitBreakerUpdatedEventFilter;
    BoardSettlementCircuitBreakerUpdated(
      newTimestamp?: null
    ): BoardSettlementCircuitBreakerUpdatedEventFilter;

    "CheckingCanProcess(uint256,bool,bool,bool,bool)"(
      processId?: null,
      boardNotStale?: null,
      validEntry?: null,
      guardianBypass?: null,
      delaysExpired?: null
    ): CheckingCanProcessEventFilter;
    CheckingCanProcess(
      processId?: null,
      boardNotStale?: null,
      validEntry?: null,
      guardianBypass?: null,
      delaysExpired?: null
    ): CheckingCanProcessEventFilter;

    "CircuitBreakerUpdated(uint256,bool,bool,bool)"(
      newTimestamp?: null,
      ivVarianceThresholdCrossed?: null,
      skewVarianceThresholdCrossed?: null,
      liquidityThresholdCrossed?: null
    ): CircuitBreakerUpdatedEventFilter;
    CircuitBreakerUpdated(
      newTimestamp?: null,
      ivVarianceThresholdCrossed?: null,
      skewVarianceThresholdCrossed?: null,
      liquidityThresholdCrossed?: null
    ): CircuitBreakerUpdatedEventFilter;

    "DepositProcessed(address,uint256,uint256,uint256,uint256)"(
      beneficiary?: string | null,
      depositQueueId?: BigNumberish | null,
      amountDeposited?: null,
      tokenPrice?: null,
      tokensReceived?: null
    ): DepositProcessedEventFilter;
    DepositProcessed(
      beneficiary?: string | null,
      depositQueueId?: BigNumberish | null,
      amountDeposited?: null,
      tokenPrice?: null,
      tokensReceived?: null
    ): DepositProcessedEventFilter;

    "DepositQueued(address,uint256,uint256,uint256,uint256)"(
      beneficiary?: string | null,
      amountDeposited?: null,
      queuedDepositId?: null,
      depositInitiatedTime?: null,
      totalQueuedDeposits?: null
    ): DepositQueuedEventFilter;
    DepositQueued(
      beneficiary?: string | null,
      amountDeposited?: null,
      queuedDepositId?: null,
      depositInitiatedTime?: null,
      totalQueuedDeposits?: null
    ): DepositQueuedEventFilter;

    "LiquidityPoolParametersUpdated(tuple)"(
      lpParams?: null
    ): LiquidityPoolParametersUpdatedEventFilter;
    LiquidityPoolParametersUpdated(
      lpParams?: null
    ): LiquidityPoolParametersUpdatedEventFilter;

    "OutstandingSettlementSent(address,uint256,uint256)"(
      user?: string | null,
      amount?: null,
      totalOutstandingSettlements?: null
    ): OutstandingSettlementSentEventFilter;
    OutstandingSettlementSent(
      user?: string | null,
      amount?: null,
      totalOutstandingSettlements?: null
    ): OutstandingSettlementSentEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PoolHedgerUpdated(address)"(
      poolHedger?: null
    ): PoolHedgerUpdatedEventFilter;
    PoolHedgerUpdated(poolHedger?: null): PoolHedgerUpdatedEventFilter;

    "PremiumTransferred(address,uint256,uint256)"(
      recipient?: string | null,
      recipientPortion?: null,
      optionMarketPortion?: null
    ): PremiumTransferredEventFilter;
    PremiumTransferred(
      recipient?: string | null,
      recipientPortion?: null,
      optionMarketPortion?: null
    ): PremiumTransferredEventFilter;

    "QuoteFreed(uint256,uint256)"(
      quoteFreed?: null,
      lockedCollateralQuote?: null
    ): QuoteFreedEventFilter;
    QuoteFreed(
      quoteFreed?: null,
      lockedCollateralQuote?: null
    ): QuoteFreedEventFilter;

    "QuoteLocked(uint256,uint256)"(
      quoteLocked?: null,
      lockedCollateralQuote?: null
    ): QuoteLockedEventFilter;
    QuoteLocked(
      quoteLocked?: null,
      lockedCollateralQuote?: null
    ): QuoteLockedEventFilter;

    "QuoteTransferredToPoolHedger(uint256)"(
      amountQuote?: null
    ): QuoteTransferredToPoolHedgerEventFilter;
    QuoteTransferredToPoolHedger(
      amountQuote?: null
    ): QuoteTransferredToPoolHedgerEventFilter;

    "WithdrawPartiallyProcessed(address,uint256,uint256,uint256,uint256,uint256)"(
      beneficiary?: string | null,
      withdrawalQueueId?: BigNumberish | null,
      amountWithdrawn?: null,
      tokenPrice?: null,
      quoteReceived?: null,
      totalQueuedWithdrawals?: null
    ): WithdrawPartiallyProcessedEventFilter;
    WithdrawPartiallyProcessed(
      beneficiary?: string | null,
      withdrawalQueueId?: BigNumberish | null,
      amountWithdrawn?: null,
      tokenPrice?: null,
      quoteReceived?: null,
      totalQueuedWithdrawals?: null
    ): WithdrawPartiallyProcessedEventFilter;

    "WithdrawProcessed(address,uint256,uint256,uint256,uint256,uint256)"(
      beneficiary?: string | null,
      withdrawalQueueId?: BigNumberish | null,
      amountWithdrawn?: null,
      tokenPrice?: null,
      quoteReceived?: null,
      totalQueuedWithdrawals?: null
    ): WithdrawProcessedEventFilter;
    WithdrawProcessed(
      beneficiary?: string | null,
      withdrawalQueueId?: BigNumberish | null,
      amountWithdrawn?: null,
      tokenPrice?: null,
      quoteReceived?: null,
      totalQueuedWithdrawals?: null
    ): WithdrawProcessedEventFilter;

    "WithdrawQueued(address,uint256,uint256,uint256,uint256)"(
      beneficiary?: string | null,
      amountWithdrawn?: null,
      queuedWithdrawalId?: null,
      withdrawalInitiatedTime?: null,
      totalQueuedWithdrawals?: null
    ): WithdrawQueuedEventFilter;
    WithdrawQueued(
      beneficiary?: string | null,
      amountWithdrawn?: null,
      queuedWithdrawalId?: null,
      withdrawalInitiatedTime?: null,
      totalQueuedWithdrawals?: null
    ): WithdrawQueuedEventFilter;
  };

  estimateGas: {
    CBTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    boardSettlement(
      insolventSettlements: BigNumberish,
      amountQuoteFreed: BigNumberish,
      amountQuoteReserved: BigNumberish,
      amountBaseLiquidated: BigNumberish,
      amountBaseFreed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freeQuoteCollateralAndSendPremium(
      amountQuoteFreed: BigNumberish,
      recipient: string,
      totalCost: BigNumberish,
      reservedFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLiquidity(
      basePrice: BigNumberish,
      short: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLpParams(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPoolValueQuote(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _synthetixAdapter: string,
      _optionMarket: string,
      _liquidityTokens: string,
      _greekCache: string,
      _poolHedger: string,
      _shortCollateral: string,
      _quoteAsset: string,
      _baseAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    initiateDeposit(
      beneficiary: string,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initiateWithdraw(
      beneficiary: string,
      amountLiquidityTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    insolventSettlementAmount(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateBaseAndSendPremium(
      amountBase: BigNumberish,
      recipient: string,
      totalCost: BigNumberish,
      reservedFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidationInsolventAmount(overrides?: CallOverrides): Promise<BigNumber>;

    lockBase(
      amount: BigNumberish,
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      freeLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockQuote(
      amount: BigNumberish,
      freeLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockedCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    lpParams(overrides?: CallOverrides): Promise<BigNumber>;

    nextQueuedDepositId(overrides?: CallOverrides): Promise<BigNumber>;

    nextQueuedWithdrawalId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolHedger(overrides?: CallOverrides): Promise<BigNumber>;

    processDepositQueue(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    processWithdrawalQueue(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    queuedDepositHead(overrides?: CallOverrides): Promise<BigNumber>;

    queuedDeposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queuedWithdrawalHead(overrides?: CallOverrides): Promise<BigNumber>;

    queuedWithdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reclaimInsolventBase(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      amountBase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reclaimInsolventQuote(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendSettlementValue(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendShortPremium(
      recipient: string,
      premium: BigNumberish,
      freeLiquidity: BigNumberish,
      reservedFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityPoolParameters(
      _lpParams: LiquidityPool.LiquidityPoolParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolHedger(
      newPoolHedger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalOutstandingSettlements(overrides?: CallOverrides): Promise<BigNumber>;

    totalQueuedDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    totalQueuedWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferQuoteToHedge(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCBs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLiquidationInsolvency(
      insolvencyAmountInQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CBTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boardSettlement(
      insolventSettlements: BigNumberish,
      amountQuoteFreed: BigNumberish,
      amountQuoteReserved: BigNumberish,
      amountBaseLiquidated: BigNumberish,
      amountBaseFreed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freeQuoteCollateralAndSendPremium(
      amountQuoteFreed: BigNumberish,
      recipient: string,
      totalCost: BigNumberish,
      reservedFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLiquidity(
      basePrice: BigNumberish,
      short: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLpParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalPoolValueQuote(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalTokenSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _synthetixAdapter: string,
      _optionMarket: string,
      _liquidityTokens: string,
      _greekCache: string,
      _poolHedger: string,
      _shortCollateral: string,
      _quoteAsset: string,
      _baseAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initiateDeposit(
      beneficiary: string,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initiateWithdraw(
      beneficiary: string,
      amountLiquidityTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    insolventSettlementAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateBaseAndSendPremium(
      amountBase: BigNumberish,
      recipient: string,
      totalCost: BigNumberish,
      reservedFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidationInsolventAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockBase(
      amount: BigNumberish,
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      freeLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockQuote(
      amount: BigNumberish,
      freeLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockedCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextQueuedDepositId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextQueuedWithdrawalId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolHedger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processDepositQueue(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    processWithdrawalQueue(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    queuedDepositHead(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queuedDeposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queuedWithdrawalHead(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queuedWithdrawals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reclaimInsolventBase(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      amountBase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reclaimInsolventQuote(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendSettlementValue(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendShortPremium(
      recipient: string,
      premium: BigNumberish,
      freeLiquidity: BigNumberish,
      reservedFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityPoolParameters(
      _lpParams: LiquidityPool.LiquidityPoolParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolHedger(
      newPoolHedger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalOutstandingSettlements(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalQueuedDeposits(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalQueuedWithdrawals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferQuoteToHedge(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCBs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLiquidationInsolvency(
      insolvencyAmountInQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
