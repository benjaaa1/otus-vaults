/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Vault {
  export type VaultParamsStruct = {
    decimals: BigNumberish;
    cap: BigNumberish;
    asset: string;
  };

  export type VaultParamsStructOutput = [number, BigNumber, string] & {
    decimals: number;
    cap: BigNumber;
    asset: string;
  };
}

export interface OtusCloneFactoryInterface extends utils.Interface {
  contractName: "OtusCloneFactory";
  functions: {
    "_cloneStrategy()": FunctionFragment;
    "_cloneSupervisor()": FunctionFragment;
    "_cloneVault(string,string,(uint8,uint104,address))": FunctionFragment;
    "keeper()": FunctionFragment;
    "otusVault()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setKeeper(address)": FunctionFragment;
    "strategies(address)": FunctionFragment;
    "strategy()": FunctionFragment;
    "supervisor()": FunctionFragment;
    "supervisors(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vaults(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_cloneStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_cloneSupervisor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_cloneVault",
    values: [string, string, Vault.VaultParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "keeper", values?: undefined): string;
  encodeFunctionData(functionFragment: "otusVault", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setKeeper", values: [string]): string;
  encodeFunctionData(functionFragment: "strategies", values: [string]): string;
  encodeFunctionData(functionFragment: "strategy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supervisor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "supervisors", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vaults", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "_cloneStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_cloneSupervisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_cloneVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "otusVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "strategy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supervisor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supervisors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;

  events: {
    "NewStrategyClone(address,address)": EventFragment;
    "NewSupervisorClone(address,address)": EventFragment;
    "NewVaultClone(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewStrategyClone"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSupervisorClone"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewVaultClone"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type NewStrategyCloneEvent = TypedEvent<
  [string, string],
  { _clone: string; _owner: string }
>;

export type NewStrategyCloneEventFilter =
  TypedEventFilter<NewStrategyCloneEvent>;

export type NewSupervisorCloneEvent = TypedEvent<
  [string, string],
  { _clone: string; _owner: string }
>;

export type NewSupervisorCloneEventFilter =
  TypedEventFilter<NewSupervisorCloneEvent>;

export type NewVaultCloneEvent = TypedEvent<
  [string, string],
  { _clone: string; _owner: string }
>;

export type NewVaultCloneEventFilter = TypedEventFilter<NewVaultCloneEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface OtusCloneFactory extends BaseContract {
  contractName: "OtusCloneFactory";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OtusCloneFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _cloneStrategy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _cloneSupervisor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _cloneVault(
      _tokenName: string,
      _tokenSymbol: string,
      _vaultParams: Vault.VaultParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    otusVault(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategies(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    strategy(overrides?: CallOverrides): Promise<[string]>;

    supervisor(overrides?: CallOverrides): Promise<[string]>;

    supervisors(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaults(arg0: string, overrides?: CallOverrides): Promise<[string]>;
  };

  _cloneStrategy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _cloneSupervisor(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _cloneVault(
    _tokenName: string,
    _tokenSymbol: string,
    _vaultParams: Vault.VaultParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  keeper(overrides?: CallOverrides): Promise<string>;

  otusVault(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeeper(
    _keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategies(arg0: string, overrides?: CallOverrides): Promise<string>;

  strategy(overrides?: CallOverrides): Promise<string>;

  supervisor(overrides?: CallOverrides): Promise<string>;

  supervisors(arg0: string, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaults(arg0: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _cloneStrategy(overrides?: CallOverrides): Promise<void>;

    _cloneSupervisor(overrides?: CallOverrides): Promise<void>;

    _cloneVault(
      _tokenName: string,
      _tokenSymbol: string,
      _vaultParams: Vault.VaultParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    keeper(overrides?: CallOverrides): Promise<string>;

    otusVault(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setKeeper(_keeper: string, overrides?: CallOverrides): Promise<void>;

    strategies(arg0: string, overrides?: CallOverrides): Promise<string>;

    strategy(overrides?: CallOverrides): Promise<string>;

    supervisor(overrides?: CallOverrides): Promise<string>;

    supervisors(arg0: string, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vaults(arg0: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "NewStrategyClone(address,address)"(
      _clone?: null,
      _owner?: null
    ): NewStrategyCloneEventFilter;
    NewStrategyClone(_clone?: null, _owner?: null): NewStrategyCloneEventFilter;

    "NewSupervisorClone(address,address)"(
      _clone?: null,
      _owner?: null
    ): NewSupervisorCloneEventFilter;
    NewSupervisorClone(
      _clone?: null,
      _owner?: null
    ): NewSupervisorCloneEventFilter;

    "NewVaultClone(address,address)"(
      _clone?: null,
      _owner?: null
    ): NewVaultCloneEventFilter;
    NewVaultClone(_clone?: null, _owner?: null): NewVaultCloneEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    _cloneStrategy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _cloneSupervisor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _cloneVault(
      _tokenName: string,
      _tokenSymbol: string,
      _vaultParams: Vault.VaultParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    otusVault(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategies(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    strategy(overrides?: CallOverrides): Promise<BigNumber>;

    supervisor(overrides?: CallOverrides): Promise<BigNumber>;

    supervisors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaults(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _cloneStrategy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _cloneSupervisor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _cloneVault(
      _tokenName: string,
      _tokenSymbol: string,
      _vaultParams: Vault.VaultParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    otusVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    strategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supervisor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supervisors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
