/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Vault {
  export type VaultParamsStruct = {
    decimals: BigNumberish;
    cap: BigNumberish;
    asset: string;
  };

  export type VaultParamsStructOutput = [number, BigNumber, string] & {
    decimals: number;
    cap: BigNumber;
    asset: string;
  };
}

export interface MockOtusVaultInterface extends utils.Interface {
  contractName: "MockOtusVault";
  functions: {
    "futuresMarket()": FunctionFragment;
    "initialize(address,address,string,string,(uint8,uint104,address))": FunctionFragment;
    "supervisor()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "futuresMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, Vault.VaultParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "supervisor",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "futuresMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supervisor", data: BytesLike): Result;

  events: {};
}

export interface MockOtusVault extends BaseContract {
  contractName: "MockOtusVault";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockOtusVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    futuresMarket(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _owner: string,
      _supervisor: string,
      _tokenName: string,
      _tokenSymbol: string,
      _vaultParams: Vault.VaultParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supervisor(overrides?: CallOverrides): Promise<[string]>;
  };

  futuresMarket(overrides?: CallOverrides): Promise<string>;

  initialize(
    _owner: string,
    _supervisor: string,
    _tokenName: string,
    _tokenSymbol: string,
    _vaultParams: Vault.VaultParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supervisor(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    futuresMarket(overrides?: CallOverrides): Promise<string>;

    initialize(
      _owner: string,
      _supervisor: string,
      _tokenName: string,
      _tokenSymbol: string,
      _vaultParams: Vault.VaultParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    supervisor(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    futuresMarket(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: string,
      _supervisor: string,
      _tokenName: string,
      _tokenSymbol: string,
      _vaultParams: Vault.VaultParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supervisor(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    futuresMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _supervisor: string,
      _tokenName: string,
      _tokenSymbol: string,
      _vaultParams: Vault.VaultParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supervisor(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
