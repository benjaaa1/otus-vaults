/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace SynthetixAdapter {
  export type ExchangeParamsStruct = {
    spotPrice: BigNumberish;
    quoteKey: BytesLike;
    baseKey: BytesLike;
    short: string;
    quoteBaseFeeRate: BigNumberish;
    baseQuoteFeeRate: BigNumberish;
  };

  export type ExchangeParamsStructOutput = [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    spotPrice: BigNumber;
    quoteKey: string;
    baseKey: string;
    short: string;
    quoteBaseFeeRate: BigNumber;
    baseQuoteFeeRate: BigNumber;
  };
}

export interface SynthetixAdapterInterface extends utils.Interface {
  contractName: "SynthetixAdapter";
  functions: {
    "addressResolver()": FunctionFragment;
    "baseKey(address)": FunctionFragment;
    "collateralShort()": FunctionFragment;
    "delegateApprovals()": FunctionFragment;
    "estimateExchangeForExactBase((uint256,bytes32,bytes32,address,uint256,uint256),uint256)": FunctionFragment;
    "estimateExchangeForExactQuote((uint256,bytes32,bytes32,address,uint256,uint256),uint256)": FunctionFragment;
    "exchangeForExactBase((uint256,bytes32,bytes32,address,uint256,uint256),address,uint256)": FunctionFragment;
    "exchangeForExactBaseWithLimit((uint256,bytes32,bytes32,address,uint256,uint256),address,uint256,uint256)": FunctionFragment;
    "exchangeFromExactBase(address,uint256)": FunctionFragment;
    "exchangeFromExactQuote(address,uint256)": FunctionFragment;
    "exchangeRates()": FunctionFragment;
    "exchanger()": FunctionFragment;
    "getExchangeParams(address)": FunctionFragment;
    "getSpotPrice(bytes32)": FunctionFragment;
    "getSpotPriceForMarket(address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isGlobalPaused()": FunctionFragment;
    "isMarketPaused(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "quoteKey(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardAddress(address)": FunctionFragment;
    "setAddressResolver(address)": FunctionFragment;
    "setGlobalPaused(bool)": FunctionFragment;
    "setGlobalsForContract(address,bytes32,bytes32,address,bytes32)": FunctionFragment;
    "setMarketPaused(address,bool)": FunctionFragment;
    "synthetix()": FunctionFragment;
    "trackingCode(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateSynthetixAddresses()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressResolver",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseKey", values: [string]): string;
  encodeFunctionData(
    functionFragment: "collateralShort",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegateApprovals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateExchangeForExactBase",
    values: [SynthetixAdapter.ExchangeParamsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateExchangeForExactQuote",
    values: [SynthetixAdapter.ExchangeParamsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeForExactBase",
    values: [SynthetixAdapter.ExchangeParamsStruct, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeForExactBaseWithLimit",
    values: [
      SynthetixAdapter.ExchangeParamsStruct,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeFromExactBase",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeFromExactQuote",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRates",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "exchanger", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getExchangeParams",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotPrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotPriceForMarket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isGlobalPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketPaused",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "quoteKey", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddressResolver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalPaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalsForContract",
    values: [string, BytesLike, BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketPaused",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "synthetix", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "trackingCode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSynthetixAddresses",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addressResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralShort",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateExchangeForExactBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateExchangeForExactQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeForExactBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeForExactBaseWithLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeFromExactBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeFromExactQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exchanger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotPriceForMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isGlobalPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMarketPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quoteKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddressResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalsForContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "synthetix", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "trackingCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSynthetixAddresses",
    data: BytesLike
  ): Result;

  events: {
    "AddressResolverSet(address)": EventFragment;
    "BaseKeySet(address,bytes32)": EventFragment;
    "BaseSwappedForQuote(address,address,uint256,uint256)": EventFragment;
    "GlobalPaused(bool)": EventFragment;
    "MarketPaused(address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "QuoteKeySet(address,bytes32)": EventFragment;
    "QuoteSwappedForBase(address,address,uint256,uint256)": EventFragment;
    "SynthetixAddressesUpdated(address,address,address,address,address)": EventFragment;
    "TradingCutoffSet(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressResolverSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseKeySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseSwappedForQuote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GlobalPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteKeySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteSwappedForBase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SynthetixAddressesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradingCutoffSet"): EventFragment;
}

export type AddressResolverSetEvent = TypedEvent<
  [string],
  { addressResolver: string }
>;

export type AddressResolverSetEventFilter =
  TypedEventFilter<AddressResolverSetEvent>;

export type BaseKeySetEvent = TypedEvent<
  [string, string],
  { contractAddress: string; baseKey: string }
>;

export type BaseKeySetEventFilter = TypedEventFilter<BaseKeySetEvent>;

export type BaseSwappedForQuoteEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    marketAddress: string;
    exchanger: string;
    baseSwapped: BigNumber;
    quoteReceived: BigNumber;
  }
>;

export type BaseSwappedForQuoteEventFilter =
  TypedEventFilter<BaseSwappedForQuoteEvent>;

export type GlobalPausedEvent = TypedEvent<[boolean], { isPaused: boolean }>;

export type GlobalPausedEventFilter = TypedEventFilter<GlobalPausedEvent>;

export type MarketPausedEvent = TypedEvent<
  [string, boolean],
  { contractAddress: string; isPaused: boolean }
>;

export type MarketPausedEventFilter = TypedEventFilter<MarketPausedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type QuoteKeySetEvent = TypedEvent<
  [string, string],
  { contractAddress: string; quoteKey: string }
>;

export type QuoteKeySetEventFilter = TypedEventFilter<QuoteKeySetEvent>;

export type QuoteSwappedForBaseEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    marketAddress: string;
    exchanger: string;
    quoteSwapped: BigNumber;
    baseReceived: BigNumber;
  }
>;

export type QuoteSwappedForBaseEventFilter =
  TypedEventFilter<QuoteSwappedForBaseEvent>;

export type SynthetixAddressesUpdatedEvent = TypedEvent<
  [string, string, string, string, string],
  {
    synthetix: string;
    exchanger: string;
    exchangeRates: string;
    collateralShort: string;
    delegateApprovals: string;
  }
>;

export type SynthetixAddressesUpdatedEventFilter =
  TypedEventFilter<SynthetixAddressesUpdatedEvent>;

export type TradingCutoffSetEvent = TypedEvent<
  [string, BigNumber],
  { contractAddress: string; tradingCutoff: BigNumber }
>;

export type TradingCutoffSetEventFilter =
  TypedEventFilter<TradingCutoffSetEvent>;

export interface SynthetixAdapter extends BaseContract {
  contractName: "SynthetixAdapter";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SynthetixAdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressResolver(overrides?: CallOverrides): Promise<[string]>;

    baseKey(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    collateralShort(overrides?: CallOverrides): Promise<[string]>;

    delegateApprovals(overrides?: CallOverrides): Promise<[string]>;

    estimateExchangeForExactBase(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      amountBase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { quoteNeeded: BigNumber }>;

    estimateExchangeForExactQuote(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      amountQuote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { baseNeeded: BigNumber }>;

    exchangeForExactBase(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      optionMarket: string,
      amountBase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeForExactBaseWithLimit(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      optionMarket: string,
      amountBase: BigNumberish,
      quoteLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeFromExactBase(
      optionMarket: string,
      amountBase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeFromExactQuote(
      optionMarket: string,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeRates(overrides?: CallOverrides): Promise<[string]>;

    exchanger(overrides?: CallOverrides): Promise<[string]>;

    getExchangeParams(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [SynthetixAdapter.ExchangeParamsStructOutput] & {
        exchangeParams: SynthetixAdapter.ExchangeParamsStructOutput;
      }
    >;

    getSpotPrice(
      to: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSpotPriceForMarket(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isGlobalPaused(overrides?: CallOverrides): Promise<[boolean]>;

    isMarketPaused(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    quoteKey(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardAddress(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    setAddressResolver(
      _addressResolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGlobalPaused(
      _isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGlobalsForContract(
      _contractAddress: string,
      _quoteKey: BytesLike,
      _baseKey: BytesLike,
      _rewardAddress: string,
      _trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketPaused(
      _contractAddress: string,
      _isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    synthetix(overrides?: CallOverrides): Promise<[string]>;

    trackingCode(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSynthetixAddresses(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addressResolver(overrides?: CallOverrides): Promise<string>;

  baseKey(arg0: string, overrides?: CallOverrides): Promise<string>;

  collateralShort(overrides?: CallOverrides): Promise<string>;

  delegateApprovals(overrides?: CallOverrides): Promise<string>;

  estimateExchangeForExactBase(
    exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
    amountBase: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateExchangeForExactQuote(
    exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
    amountQuote: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exchangeForExactBase(
    exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
    optionMarket: string,
    amountBase: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeForExactBaseWithLimit(
    exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
    optionMarket: string,
    amountBase: BigNumberish,
    quoteLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeFromExactBase(
    optionMarket: string,
    amountBase: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeFromExactQuote(
    optionMarket: string,
    amountQuote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeRates(overrides?: CallOverrides): Promise<string>;

  exchanger(overrides?: CallOverrides): Promise<string>;

  getExchangeParams(
    _contractAddress: string,
    overrides?: CallOverrides
  ): Promise<SynthetixAdapter.ExchangeParamsStructOutput>;

  getSpotPrice(to: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  getSpotPriceForMarket(
    _contractAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isGlobalPaused(overrides?: CallOverrides): Promise<boolean>;

  isMarketPaused(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  quoteKey(arg0: string, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardAddress(arg0: string, overrides?: CallOverrides): Promise<string>;

  setAddressResolver(
    _addressResolver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGlobalPaused(
    _isPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGlobalsForContract(
    _contractAddress: string,
    _quoteKey: BytesLike,
    _baseKey: BytesLike,
    _rewardAddress: string,
    _trackingCode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketPaused(
    _contractAddress: string,
    _isPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  synthetix(overrides?: CallOverrides): Promise<string>;

  trackingCode(arg0: string, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSynthetixAddresses(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addressResolver(overrides?: CallOverrides): Promise<string>;

    baseKey(arg0: string, overrides?: CallOverrides): Promise<string>;

    collateralShort(overrides?: CallOverrides): Promise<string>;

    delegateApprovals(overrides?: CallOverrides): Promise<string>;

    estimateExchangeForExactBase(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      amountBase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateExchangeForExactQuote(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      amountQuote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeForExactBase(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      optionMarket: string,
      amountBase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeForExactBaseWithLimit(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      optionMarket: string,
      amountBase: BigNumberish,
      quoteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeFromExactBase(
      optionMarket: string,
      amountBase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeFromExactQuote(
      optionMarket: string,
      amountQuote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeRates(overrides?: CallOverrides): Promise<string>;

    exchanger(overrides?: CallOverrides): Promise<string>;

    getExchangeParams(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<SynthetixAdapter.ExchangeParamsStructOutput>;

    getSpotPrice(to: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getSpotPriceForMarket(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isGlobalPaused(overrides?: CallOverrides): Promise<boolean>;

    isMarketPaused(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    quoteKey(arg0: string, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardAddress(arg0: string, overrides?: CallOverrides): Promise<string>;

    setAddressResolver(
      _addressResolver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGlobalPaused(
      _isPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setGlobalsForContract(
      _contractAddress: string,
      _quoteKey: BytesLike,
      _baseKey: BytesLike,
      _rewardAddress: string,
      _trackingCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketPaused(
      _contractAddress: string,
      _isPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    synthetix(overrides?: CallOverrides): Promise<string>;

    trackingCode(arg0: string, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSynthetixAddresses(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AddressResolverSet(address)"(
      addressResolver?: null
    ): AddressResolverSetEventFilter;
    AddressResolverSet(addressResolver?: null): AddressResolverSetEventFilter;

    "BaseKeySet(address,bytes32)"(
      contractAddress?: string | null,
      baseKey?: null
    ): BaseKeySetEventFilter;
    BaseKeySet(
      contractAddress?: string | null,
      baseKey?: null
    ): BaseKeySetEventFilter;

    "BaseSwappedForQuote(address,address,uint256,uint256)"(
      marketAddress?: string | null,
      exchanger?: string | null,
      baseSwapped?: null,
      quoteReceived?: null
    ): BaseSwappedForQuoteEventFilter;
    BaseSwappedForQuote(
      marketAddress?: string | null,
      exchanger?: string | null,
      baseSwapped?: null,
      quoteReceived?: null
    ): BaseSwappedForQuoteEventFilter;

    "GlobalPaused(bool)"(isPaused?: null): GlobalPausedEventFilter;
    GlobalPaused(isPaused?: null): GlobalPausedEventFilter;

    "MarketPaused(address,bool)"(
      contractAddress?: null,
      isPaused?: null
    ): MarketPausedEventFilter;
    MarketPaused(
      contractAddress?: null,
      isPaused?: null
    ): MarketPausedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "QuoteKeySet(address,bytes32)"(
      contractAddress?: string | null,
      quoteKey?: null
    ): QuoteKeySetEventFilter;
    QuoteKeySet(
      contractAddress?: string | null,
      quoteKey?: null
    ): QuoteKeySetEventFilter;

    "QuoteSwappedForBase(address,address,uint256,uint256)"(
      marketAddress?: string | null,
      exchanger?: string | null,
      quoteSwapped?: null,
      baseReceived?: null
    ): QuoteSwappedForBaseEventFilter;
    QuoteSwappedForBase(
      marketAddress?: string | null,
      exchanger?: string | null,
      quoteSwapped?: null,
      baseReceived?: null
    ): QuoteSwappedForBaseEventFilter;

    "SynthetixAddressesUpdated(address,address,address,address,address)"(
      synthetix?: null,
      exchanger?: null,
      exchangeRates?: null,
      collateralShort?: null,
      delegateApprovals?: null
    ): SynthetixAddressesUpdatedEventFilter;
    SynthetixAddressesUpdated(
      synthetix?: null,
      exchanger?: null,
      exchangeRates?: null,
      collateralShort?: null,
      delegateApprovals?: null
    ): SynthetixAddressesUpdatedEventFilter;

    "TradingCutoffSet(address,uint256)"(
      contractAddress?: string | null,
      tradingCutoff?: null
    ): TradingCutoffSetEventFilter;
    TradingCutoffSet(
      contractAddress?: string | null,
      tradingCutoff?: null
    ): TradingCutoffSetEventFilter;
  };

  estimateGas: {
    addressResolver(overrides?: CallOverrides): Promise<BigNumber>;

    baseKey(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    collateralShort(overrides?: CallOverrides): Promise<BigNumber>;

    delegateApprovals(overrides?: CallOverrides): Promise<BigNumber>;

    estimateExchangeForExactBase(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      amountBase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateExchangeForExactQuote(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      amountQuote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangeForExactBase(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      optionMarket: string,
      amountBase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeForExactBaseWithLimit(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      optionMarket: string,
      amountBase: BigNumberish,
      quoteLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeFromExactBase(
      optionMarket: string,
      amountBase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeFromExactQuote(
      optionMarket: string,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeRates(overrides?: CallOverrides): Promise<BigNumber>;

    exchanger(overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeParams(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpotPrice(to: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getSpotPriceForMarket(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isGlobalPaused(overrides?: CallOverrides): Promise<BigNumber>;

    isMarketPaused(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    quoteKey(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardAddress(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setAddressResolver(
      _addressResolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGlobalPaused(
      _isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGlobalsForContract(
      _contractAddress: string,
      _quoteKey: BytesLike,
      _baseKey: BytesLike,
      _rewardAddress: string,
      _trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketPaused(
      _contractAddress: string,
      _isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    synthetix(overrides?: CallOverrides): Promise<BigNumber>;

    trackingCode(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSynthetixAddresses(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressResolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseKey(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralShort(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegateApprovals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    estimateExchangeForExactBase(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      amountBase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateExchangeForExactQuote(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      amountQuote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchangeForExactBase(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      optionMarket: string,
      amountBase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeForExactBaseWithLimit(
      exchangeParams: SynthetixAdapter.ExchangeParamsStruct,
      optionMarket: string,
      amountBase: BigNumberish,
      quoteLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeFromExactBase(
      optionMarket: string,
      amountBase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeFromExactQuote(
      optionMarket: string,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeRates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchanger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExchangeParams(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpotPrice(
      to: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpotPriceForMarket(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isGlobalPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMarketPaused(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteKey(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAddressResolver(
      _addressResolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGlobalPaused(
      _isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGlobalsForContract(
      _contractAddress: string,
      _quoteKey: BytesLike,
      _baseKey: BytesLike,
      _rewardAddress: string,
      _trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketPaused(
      _contractAddress: string,
      _isPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    synthetix(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trackingCode(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSynthetixAddresses(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
