/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Strategy {
  export type DetailStruct = {
    collatBuffer: BigNumberish;
    collatPercent: BigNumberish;
    minTimeToExpiry: BigNumberish;
    maxTimeToExpiry: BigNumberish;
    targetDelta: BigNumberish;
    maxDeltaGap: BigNumberish;
    minVol: BigNumberish;
    maxVol: BigNumberish;
    size: BigNumberish;
    minTradeInterval: BigNumberish;
    maxVolVariance: BigNumberish;
    gwavPeriod: BigNumberish;
  };

  export type DetailStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    collatBuffer: BigNumber;
    collatPercent: BigNumber;
    minTimeToExpiry: BigNumber;
    maxTimeToExpiry: BigNumber;
    targetDelta: BigNumber;
    maxDeltaGap: BigNumber;
    minVol: BigNumber;
    maxVol: BigNumber;
    size: BigNumber;
    minTradeInterval: BigNumber;
    maxVolVariance: BigNumber;
    gwavPeriod: BigNumber;
  };

  export type HedgeDetailStruct = {
    hedgePercentage: BigNumberish;
    maxHedgeAttempts: BigNumberish;
    limitStrikePricePercent: BigNumberish;
    leverageSize: BigNumberish;
    stopLossLimit: BigNumberish;
  };

  export type HedgeDetailStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    hedgePercentage: BigNumber;
    maxHedgeAttempts: BigNumber;
    limitStrikePricePercent: BigNumber;
    leverageSize: BigNumber;
    stopLossLimit: BigNumber;
  };
}

export interface StrategyInterface extends utils.Interface {
  contractName: "Strategy";
  functions: {
    "_closeKwentaPosition()": FunctionFragment;
    "_openKwentaPosition(uint256)": FunctionFragment;
    "activeExpiry()": FunctionFragment;
    "activeStrikeIds(uint256)": FunctionFragment;
    "baseAsset()": FunctionFragment;
    "collateralAsset()": FunctionFragment;
    "currentHedgeStrategy()": FunctionFragment;
    "currentStrategy()": FunctionFragment;
    "currentStrikePrice()": FunctionFragment;
    "futuresMarket()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "keeper()": FunctionFragment;
    "lastTradeTimestamp(uint256)": FunctionFragment;
    "otusAdapterManager()": FunctionFragment;
    "owner()": FunctionFragment;
    "quoteAsset()": FunctionFragment;
    "reducePosition(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "returnFundsAndClearStrikes()": FunctionFragment;
    "setBoard(uint256)": FunctionFragment;
    "setStrategy(address,address,(uint256,uint256,uint256,uint256,int256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256),uint256)": FunctionFragment;
    "startTradeForRound(uint256,uint256)": FunctionFragment;
    "strikeToPositionId(uint256)": FunctionFragment;
    "tradeOptionType()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_closeKwentaPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_openKwentaPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activeExpiry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeStrikeIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "baseAsset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collateralAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentHedgeStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentStrikePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "futuresMarket",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "keeper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastTradeTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "otusAdapterManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reducePosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnFundsAndClearStrikes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBoard",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategy",
    values: [
      string,
      string,
      Strategy.DetailStruct,
      Strategy.HedgeDetailStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startTradeForRound",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strikeToPositionId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeOptionType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "_closeKwentaPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_openKwentaPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeStrikeIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentHedgeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentStrikePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "futuresMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTradeTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "otusAdapterManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quoteAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reducePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnFundsAndClearStrikes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBoard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTradeForRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strikeToPositionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeOptionType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "HedgeClosePosition(address)": EventFragment;
    "HedgeModifyPosition(address,uint256,uint256)": EventFragment;
    "KeeperUpdated(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HedgeClosePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HedgeModifyPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeeperUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type HedgeClosePositionEvent = TypedEvent<[string], { closer: string }>;

export type HedgeClosePositionEventFilter =
  TypedEventFilter<HedgeClosePositionEvent>;

export type HedgeModifyPositionEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { closer: string; marginDelta: BigNumber; hedgeAttempt: BigNumber }
>;

export type HedgeModifyPositionEventFilter =
  TypedEventFilter<HedgeModifyPositionEvent>;

export type KeeperUpdatedEvent = TypedEvent<[string], { keeper: string }>;

export type KeeperUpdatedEventFilter = TypedEventFilter<KeeperUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Strategy extends BaseContract {
  contractName: "Strategy";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StrategyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _closeKwentaPosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _openKwentaPosition(
      hedgeAttempts: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    activeExpiry(overrides?: CallOverrides): Promise<[BigNumber]>;

    activeStrikeIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baseAsset(overrides?: CallOverrides): Promise<[string]>;

    collateralAsset(overrides?: CallOverrides): Promise<[string]>;

    currentHedgeStrategy(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        hedgePercentage: BigNumber;
        maxHedgeAttempts: BigNumber;
        limitStrikePricePercent: BigNumber;
        leverageSize: BigNumber;
        stopLossLimit: BigNumber;
      }
    >;

    currentStrategy(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        collatBuffer: BigNumber;
        collatPercent: BigNumber;
        minTimeToExpiry: BigNumber;
        maxTimeToExpiry: BigNumber;
        targetDelta: BigNumber;
        maxDeltaGap: BigNumber;
        minVol: BigNumber;
        maxVol: BigNumber;
        size: BigNumber;
        minTradeInterval: BigNumber;
        maxVolVariance: BigNumber;
        gwavPeriod: BigNumber;
      }
    >;

    currentStrikePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    futuresMarket(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    lastTradeTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    otusAdapterManager(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    quoteAsset(overrides?: CallOverrides): Promise<[string]>;

    reducePosition(
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnFundsAndClearStrikes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBoard(
      boardId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStrategy(
      _quoteAsset: string,
      _baseAsset: string,
      _strategy: Strategy.DetailStruct,
      _hedgeStrategy: Strategy.HedgeDetailStruct,
      _tradeOptionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTradeForRound(
      strikeId: BigNumberish,
      collateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strikeToPositionId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tradeOptionType(overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  _closeKwentaPosition(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _openKwentaPosition(
    hedgeAttempts: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  activeExpiry(overrides?: CallOverrides): Promise<BigNumber>;

  activeStrikeIds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseAsset(overrides?: CallOverrides): Promise<string>;

  collateralAsset(overrides?: CallOverrides): Promise<string>;

  currentHedgeStrategy(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      hedgePercentage: BigNumber;
      maxHedgeAttempts: BigNumber;
      limitStrikePricePercent: BigNumber;
      leverageSize: BigNumber;
      stopLossLimit: BigNumber;
    }
  >;

  currentStrategy(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      collatBuffer: BigNumber;
      collatPercent: BigNumber;
      minTimeToExpiry: BigNumber;
      maxTimeToExpiry: BigNumber;
      targetDelta: BigNumber;
      maxDeltaGap: BigNumber;
      minVol: BigNumber;
      maxVol: BigNumber;
      size: BigNumber;
      minTradeInterval: BigNumber;
      maxVolVariance: BigNumber;
      gwavPeriod: BigNumber;
    }
  >;

  currentStrikePrice(overrides?: CallOverrides): Promise<BigNumber>;

  futuresMarket(overrides?: CallOverrides): Promise<string>;

  initialize(
    _vault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  keeper(overrides?: CallOverrides): Promise<string>;

  lastTradeTimestamp(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  otusAdapterManager(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  quoteAsset(overrides?: CallOverrides): Promise<string>;

  reducePosition(
    positionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnFundsAndClearStrikes(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBoard(
    boardId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStrategy(
    _quoteAsset: string,
    _baseAsset: string,
    _strategy: Strategy.DetailStruct,
    _hedgeStrategy: Strategy.HedgeDetailStruct,
    _tradeOptionType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTradeForRound(
    strikeId: BigNumberish,
    collateral: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strikeToPositionId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tradeOptionType(overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _closeKwentaPosition(overrides?: CallOverrides): Promise<boolean>;

    _openKwentaPosition(
      hedgeAttempts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    activeExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    activeStrikeIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseAsset(overrides?: CallOverrides): Promise<string>;

    collateralAsset(overrides?: CallOverrides): Promise<string>;

    currentHedgeStrategy(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        hedgePercentage: BigNumber;
        maxHedgeAttempts: BigNumber;
        limitStrikePricePercent: BigNumber;
        leverageSize: BigNumber;
        stopLossLimit: BigNumber;
      }
    >;

    currentStrategy(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        collatBuffer: BigNumber;
        collatPercent: BigNumber;
        minTimeToExpiry: BigNumber;
        maxTimeToExpiry: BigNumber;
        targetDelta: BigNumber;
        maxDeltaGap: BigNumber;
        minVol: BigNumber;
        maxVol: BigNumber;
        size: BigNumber;
        minTradeInterval: BigNumber;
        maxVolVariance: BigNumber;
        gwavPeriod: BigNumber;
      }
    >;

    currentStrikePrice(overrides?: CallOverrides): Promise<BigNumber>;

    futuresMarket(overrides?: CallOverrides): Promise<string>;

    initialize(_vault: string, overrides?: CallOverrides): Promise<void>;

    keeper(overrides?: CallOverrides): Promise<string>;

    lastTradeTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    otusAdapterManager(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    quoteAsset(overrides?: CallOverrides): Promise<string>;

    reducePosition(
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    returnFundsAndClearStrikes(overrides?: CallOverrides): Promise<void>;

    setBoard(boardId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setStrategy(
      _quoteAsset: string,
      _baseAsset: string,
      _strategy: Strategy.DetailStruct,
      _hedgeStrategy: Strategy.HedgeDetailStruct,
      _tradeOptionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startTradeForRound(
      strikeId: BigNumberish,
      collateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        positionId: BigNumber;
        premiumReceived: BigNumber;
        collateralToAdd: BigNumber;
      }
    >;

    strikeToPositionId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradeOptionType(overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "HedgeClosePosition(address)"(closer?: null): HedgeClosePositionEventFilter;
    HedgeClosePosition(closer?: null): HedgeClosePositionEventFilter;

    "HedgeModifyPosition(address,uint256,uint256)"(
      closer?: null,
      marginDelta?: null,
      hedgeAttempt?: null
    ): HedgeModifyPositionEventFilter;
    HedgeModifyPosition(
      closer?: null,
      marginDelta?: null,
      hedgeAttempt?: null
    ): HedgeModifyPositionEventFilter;

    "KeeperUpdated(address)"(keeper?: null): KeeperUpdatedEventFilter;
    KeeperUpdated(keeper?: null): KeeperUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    _closeKwentaPosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _openKwentaPosition(
      hedgeAttempts: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    activeExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    activeStrikeIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseAsset(overrides?: CallOverrides): Promise<BigNumber>;

    collateralAsset(overrides?: CallOverrides): Promise<BigNumber>;

    currentHedgeStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    currentStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    currentStrikePrice(overrides?: CallOverrides): Promise<BigNumber>;

    futuresMarket(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    lastTradeTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    otusAdapterManager(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    quoteAsset(overrides?: CallOverrides): Promise<BigNumber>;

    reducePosition(
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnFundsAndClearStrikes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBoard(
      boardId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStrategy(
      _quoteAsset: string,
      _baseAsset: string,
      _strategy: Strategy.DetailStruct,
      _hedgeStrategy: Strategy.HedgeDetailStruct,
      _tradeOptionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTradeForRound(
      strikeId: BigNumberish,
      collateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strikeToPositionId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradeOptionType(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _closeKwentaPosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _openKwentaPosition(
      hedgeAttempts: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    activeExpiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeStrikeIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentHedgeStrategy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentStrategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentStrikePrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    futuresMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _vault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastTradeTimestamp(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    otusAdapterManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reducePosition(
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnFundsAndClearStrikes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBoard(
      boardId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStrategy(
      _quoteAsset: string,
      _baseAsset: string,
      _strategy: Strategy.DetailStruct,
      _hedgeStrategy: Strategy.HedgeDetailStruct,
      _tradeOptionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTradeForRound(
      strikeId: BigNumberish,
      collateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strikeToPositionId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tradeOptionType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
