/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IExchangerInterface extends utils.Interface {
  contractName: "IExchanger";
  functions: {
    "calculateAmountAfterSettlement(address,bytes32,uint256,uint256)": FunctionFragment;
    "dynamicFeeRateForExchange(bytes32,bytes32)": FunctionFragment;
    "exchange(address,address,bytes32,uint256,bytes32,address,bool,address,bytes32)": FunctionFragment;
    "exchangeAtomically(address,bytes32,uint256,bytes32,address,bytes32)": FunctionFragment;
    "feeRateForExchange(bytes32,bytes32)": FunctionFragment;
    "getAmountsForExchange(uint256,bytes32,bytes32)": FunctionFragment;
    "hasWaitingPeriodOrSettlementOwing(address,bytes32)": FunctionFragment;
    "isSynthRateInvalid(bytes32)": FunctionFragment;
    "lastExchangeRate(bytes32)": FunctionFragment;
    "maxSecsLeftInWaitingPeriod(address,bytes32)": FunctionFragment;
    "priceDeviationThresholdFactor()": FunctionFragment;
    "settle(address,bytes32)": FunctionFragment;
    "settlementOwing(address,bytes32)": FunctionFragment;
    "suspendSynthWithInvalidRate(bytes32)": FunctionFragment;
    "waitingPeriodSecs()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateAmountAfterSettlement",
    values: [string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dynamicFeeRateForExchange",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange",
    values: [
      string,
      string,
      BytesLike,
      BigNumberish,
      BytesLike,
      string,
      boolean,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeAtomically",
    values: [string, BytesLike, BigNumberish, BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRateForExchange",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsForExchange",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasWaitingPeriodOrSettlementOwing",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSynthRateInvalid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastExchangeRate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxSecsLeftInWaitingPeriod",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "priceDeviationThresholdFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementOwing",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "suspendSynthWithInvalidRate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "waitingPeriodSecs",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateAmountAfterSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dynamicFeeRateForExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeAtomically",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRateForExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsForExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasWaitingPeriodOrSettlementOwing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSynthRateInvalid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSecsLeftInWaitingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceDeviationThresholdFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settlementOwing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "suspendSynthWithInvalidRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "waitingPeriodSecs",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IExchanger extends BaseContract {
  contractName: "IExchanger";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IExchangerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateAmountAfterSettlement(
      from: string,
      currencyKey: BytesLike,
      amount: BigNumberish,
      refunded: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountAfterSettlement: BigNumber }>;

    dynamicFeeRateForExchange(
      sourceCurrencyKey: BytesLike,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { feeRate: BigNumber; tooVolatile: boolean }
    >;

    exchange(
      exchangeForAddress: string,
      from: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      destinationAddress: string,
      virtualSynth: boolean,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeAtomically(
      from: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      destinationAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeRateForExchange(
      sourceCurrencyKey: BytesLike,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAmountsForExchange(
      sourceAmount: BigNumberish,
      sourceCurrencyKey: BytesLike,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountReceived: BigNumber;
        fee: BigNumber;
        exchangeFeeRate: BigNumber;
      }
    >;

    hasWaitingPeriodOrSettlementOwing(
      account: string,
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSynthRateInvalid(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastExchangeRate(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxSecsLeftInWaitingPeriod(
      account: string,
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priceDeviationThresholdFactor(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    settle(
      from: string,
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settlementOwing(
      account: string,
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        reclaimAmount: BigNumber;
        rebateAmount: BigNumber;
        numEntries: BigNumber;
      }
    >;

    suspendSynthWithInvalidRate(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    waitingPeriodSecs(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  calculateAmountAfterSettlement(
    from: string,
    currencyKey: BytesLike,
    amount: BigNumberish,
    refunded: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dynamicFeeRateForExchange(
    sourceCurrencyKey: BytesLike,
    destinationCurrencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean] & { feeRate: BigNumber; tooVolatile: boolean }
  >;

  exchange(
    exchangeForAddress: string,
    from: string,
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    destinationAddress: string,
    virtualSynth: boolean,
    rewardAddress: string,
    trackingCode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeAtomically(
    from: string,
    sourceCurrencyKey: BytesLike,
    sourceAmount: BigNumberish,
    destinationCurrencyKey: BytesLike,
    destinationAddress: string,
    trackingCode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeRateForExchange(
    sourceCurrencyKey: BytesLike,
    destinationCurrencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountsForExchange(
    sourceAmount: BigNumberish,
    sourceCurrencyKey: BytesLike,
    destinationCurrencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amountReceived: BigNumber;
      fee: BigNumber;
      exchangeFeeRate: BigNumber;
    }
  >;

  hasWaitingPeriodOrSettlementOwing(
    account: string,
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSynthRateInvalid(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastExchangeRate(
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxSecsLeftInWaitingPeriod(
    account: string,
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priceDeviationThresholdFactor(overrides?: CallOverrides): Promise<BigNumber>;

  settle(
    from: string,
    currencyKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settlementOwing(
    account: string,
    currencyKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      reclaimAmount: BigNumber;
      rebateAmount: BigNumber;
      numEntries: BigNumber;
    }
  >;

  suspendSynthWithInvalidRate(
    currencyKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  waitingPeriodSecs(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    calculateAmountAfterSettlement(
      from: string,
      currencyKey: BytesLike,
      amount: BigNumberish,
      refunded: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dynamicFeeRateForExchange(
      sourceCurrencyKey: BytesLike,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { feeRate: BigNumber; tooVolatile: boolean }
    >;

    exchange(
      exchangeForAddress: string,
      from: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      destinationAddress: string,
      virtualSynth: boolean,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { amountReceived: BigNumber; vSynth: string }
    >;

    exchangeAtomically(
      from: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      destinationAddress: string,
      trackingCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeRateForExchange(
      sourceCurrencyKey: BytesLike,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsForExchange(
      sourceAmount: BigNumberish,
      sourceCurrencyKey: BytesLike,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountReceived: BigNumber;
        fee: BigNumber;
        exchangeFeeRate: BigNumber;
      }
    >;

    hasWaitingPeriodOrSettlementOwing(
      account: string,
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSynthRateInvalid(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastExchangeRate(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxSecsLeftInWaitingPeriod(
      account: string,
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceDeviationThresholdFactor(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settle(
      from: string,
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        reclaimed: BigNumber;
        refunded: BigNumber;
        numEntries: BigNumber;
      }
    >;

    settlementOwing(
      account: string,
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        reclaimAmount: BigNumber;
        rebateAmount: BigNumber;
        numEntries: BigNumber;
      }
    >;

    suspendSynthWithInvalidRate(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    waitingPeriodSecs(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    calculateAmountAfterSettlement(
      from: string,
      currencyKey: BytesLike,
      amount: BigNumberish,
      refunded: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dynamicFeeRateForExchange(
      sourceCurrencyKey: BytesLike,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchange(
      exchangeForAddress: string,
      from: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      destinationAddress: string,
      virtualSynth: boolean,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeAtomically(
      from: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      destinationAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeRateForExchange(
      sourceCurrencyKey: BytesLike,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsForExchange(
      sourceAmount: BigNumberish,
      sourceCurrencyKey: BytesLike,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasWaitingPeriodOrSettlementOwing(
      account: string,
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSynthRateInvalid(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastExchangeRate(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxSecsLeftInWaitingPeriod(
      account: string,
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceDeviationThresholdFactor(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settle(
      from: string,
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settlementOwing(
      account: string,
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    suspendSynthWithInvalidRate(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    waitingPeriodSecs(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateAmountAfterSettlement(
      from: string,
      currencyKey: BytesLike,
      amount: BigNumberish,
      refunded: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dynamicFeeRateForExchange(
      sourceCurrencyKey: BytesLike,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchange(
      exchangeForAddress: string,
      from: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      destinationAddress: string,
      virtualSynth: boolean,
      rewardAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeAtomically(
      from: string,
      sourceCurrencyKey: BytesLike,
      sourceAmount: BigNumberish,
      destinationCurrencyKey: BytesLike,
      destinationAddress: string,
      trackingCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeRateForExchange(
      sourceCurrencyKey: BytesLike,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsForExchange(
      sourceAmount: BigNumberish,
      sourceCurrencyKey: BytesLike,
      destinationCurrencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasWaitingPeriodOrSettlementOwing(
      account: string,
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSynthRateInvalid(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastExchangeRate(
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxSecsLeftInWaitingPeriod(
      account: string,
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceDeviationThresholdFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settle(
      from: string,
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settlementOwing(
      account: string,
      currencyKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    suspendSynthWithInvalidRate(
      currencyKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    waitingPeriodSecs(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
