/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace PoolHedger {
  export type PoolHedgerParametersStruct = {
    shortBuffer: BigNumberish;
    interactionDelay: BigNumberish;
    hedgeCap: BigNumberish;
  };

  export type PoolHedgerParametersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    shortBuffer: BigNumber;
    interactionDelay: BigNumber;
    hedgeCap: BigNumber;
  };
}

export interface PoolHedgerInterface extends utils.Interface {
  contractName: "PoolHedger";
  functions: {
    "getCappedExpectedHedge()": FunctionFragment;
    "getCurrentHedgedNetDelta()": FunctionFragment;
    "getHedgingLiquidity(address,uint256)": FunctionFragment;
    "getPoolHedgerParams()": FunctionFragment;
    "getShortPosition(address)": FunctionFragment;
    "hedgeDelta()": FunctionFragment;
    "init(address,address,address,address,address,address)": FunctionFragment;
    "lastInteraction()": FunctionFragment;
    "openShortAccount()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolHedgerParams()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resetInteractionDelay()": FunctionFragment;
    "setPoolHedgerParams((uint256,uint256,uint256))": FunctionFragment;
    "shortId()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateCollateral()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getCappedExpectedHedge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentHedgedNetDelta",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHedgingLiquidity",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolHedgerParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getShortPosition",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hedgeDelta",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastInteraction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openShortAccount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolHedgerParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetInteractionDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolHedgerParams",
    values: [PoolHedger.PoolHedgerParametersStruct]
  ): string;
  encodeFunctionData(functionFragment: "shortId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCollateral",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getCappedExpectedHedge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentHedgedNetDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHedgingLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolHedgerParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShortPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hedgeDelta", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastInteraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openShortAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolHedgerParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetInteractionDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolHedgerParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shortId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCollateral",
    data: BytesLike
  ): Result;

  events: {
    "LongSetTo(uint256,uint256)": EventFragment;
    "OpenedShortAccount(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolHedgerParametersSet(tuple)": EventFragment;
    "PositionUpdated(int256,int256,int256)": EventFragment;
    "QuoteReturnedToLP(uint256)": EventFragment;
    "ShortSetTo(uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LongSetTo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenedShortAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolHedgerParametersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteReturnedToLP"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShortSetTo"): EventFragment;
}

export type LongSetToEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldAmount: BigNumber; newAmount: BigNumber }
>;

export type LongSetToEventFilter = TypedEventFilter<LongSetToEvent>;

export type OpenedShortAccountEvent = TypedEvent<
  [BigNumber],
  { shortId: BigNumber }
>;

export type OpenedShortAccountEventFilter =
  TypedEventFilter<OpenedShortAccountEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PoolHedgerParametersSetEvent = TypedEvent<
  [PoolHedger.PoolHedgerParametersStructOutput],
  { poolHedgerParams: PoolHedger.PoolHedgerParametersStructOutput }
>;

export type PoolHedgerParametersSetEventFilter =
  TypedEventFilter<PoolHedgerParametersSetEvent>;

export type PositionUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  {
    oldNetDelta: BigNumber;
    currentNetDelta: BigNumber;
    expectedNetDelta: BigNumber;
  }
>;

export type PositionUpdatedEventFilter = TypedEventFilter<PositionUpdatedEvent>;

export type QuoteReturnedToLPEvent = TypedEvent<
  [BigNumber],
  { amountQuote: BigNumber }
>;

export type QuoteReturnedToLPEventFilter =
  TypedEventFilter<QuoteReturnedToLPEvent>;

export type ShortSetToEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    oldShort: BigNumber;
    newShort: BigNumber;
    oldCollateral: BigNumber;
    newCollateral: BigNumber;
  }
>;

export type ShortSetToEventFilter = TypedEventFilter<ShortSetToEvent>;

export interface PoolHedger extends BaseContract {
  contractName: "PoolHedger";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolHedgerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getCappedExpectedHedge(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { cappedExpectedHedge: BigNumber }>;

    getCurrentHedgedNetDelta(overrides?: CallOverrides): Promise<[BigNumber]>;

    getHedgingLiquidity(
      short: string,
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        pendingDeltaLiquidity: BigNumber;
        usedDeltaLiquidity: BigNumber;
      }
    >;

    getPoolHedgerParams(
      overrides?: CallOverrides
    ): Promise<[PoolHedger.PoolHedgerParametersStructOutput]>;

    getShortPosition(
      short: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        shortBalance: BigNumber;
        collateral: BigNumber;
      }
    >;

    hedgeDelta(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      _synthetixAdapter: string,
      _optionMarket: string,
      _optionGreekCache: string,
      _liquidityPool: string,
      _quoteAsset: string,
      _baseAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastInteraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    openShortAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolHedgerParams(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        shortBuffer: BigNumber;
        interactionDelay: BigNumber;
        hedgeCap: BigNumber;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resetInteractionDelay(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolHedgerParams(
      _poolHedgerParams: PoolHedger.PoolHedgerParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shortId(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCollateral(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getCappedExpectedHedge(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentHedgedNetDelta(overrides?: CallOverrides): Promise<BigNumber>;

  getHedgingLiquidity(
    short: string,
    spotPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      pendingDeltaLiquidity: BigNumber;
      usedDeltaLiquidity: BigNumber;
    }
  >;

  getPoolHedgerParams(
    overrides?: CallOverrides
  ): Promise<PoolHedger.PoolHedgerParametersStructOutput>;

  getShortPosition(
    short: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { shortBalance: BigNumber; collateral: BigNumber }
  >;

  hedgeDelta(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    _synthetixAdapter: string,
    _optionMarket: string,
    _optionGreekCache: string,
    _liquidityPool: string,
    _quoteAsset: string,
    _baseAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastInteraction(overrides?: CallOverrides): Promise<BigNumber>;

  openShortAccount(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolHedgerParams(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      shortBuffer: BigNumber;
      interactionDelay: BigNumber;
      hedgeCap: BigNumber;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resetInteractionDelay(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolHedgerParams(
    _poolHedgerParams: PoolHedger.PoolHedgerParametersStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shortId(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCollateral(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getCappedExpectedHedge(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentHedgedNetDelta(overrides?: CallOverrides): Promise<BigNumber>;

    getHedgingLiquidity(
      short: string,
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        pendingDeltaLiquidity: BigNumber;
        usedDeltaLiquidity: BigNumber;
      }
    >;

    getPoolHedgerParams(
      overrides?: CallOverrides
    ): Promise<PoolHedger.PoolHedgerParametersStructOutput>;

    getShortPosition(
      short: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        shortBalance: BigNumber;
        collateral: BigNumber;
      }
    >;

    hedgeDelta(overrides?: CallOverrides): Promise<void>;

    init(
      _synthetixAdapter: string,
      _optionMarket: string,
      _optionGreekCache: string,
      _liquidityPool: string,
      _quoteAsset: string,
      _baseAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastInteraction(overrides?: CallOverrides): Promise<BigNumber>;

    openShortAccount(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolHedgerParams(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        shortBuffer: BigNumber;
        interactionDelay: BigNumber;
        hedgeCap: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resetInteractionDelay(overrides?: CallOverrides): Promise<void>;

    setPoolHedgerParams(
      _poolHedgerParams: PoolHedger.PoolHedgerParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    shortId(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCollateral(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "LongSetTo(uint256,uint256)"(
      oldAmount?: null,
      newAmount?: null
    ): LongSetToEventFilter;
    LongSetTo(oldAmount?: null, newAmount?: null): LongSetToEventFilter;

    "OpenedShortAccount(uint256)"(
      shortId?: null
    ): OpenedShortAccountEventFilter;
    OpenedShortAccount(shortId?: null): OpenedShortAccountEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PoolHedgerParametersSet(tuple)"(
      poolHedgerParams?: null
    ): PoolHedgerParametersSetEventFilter;
    PoolHedgerParametersSet(
      poolHedgerParams?: null
    ): PoolHedgerParametersSetEventFilter;

    "PositionUpdated(int256,int256,int256)"(
      oldNetDelta?: null,
      currentNetDelta?: null,
      expectedNetDelta?: null
    ): PositionUpdatedEventFilter;
    PositionUpdated(
      oldNetDelta?: null,
      currentNetDelta?: null,
      expectedNetDelta?: null
    ): PositionUpdatedEventFilter;

    "QuoteReturnedToLP(uint256)"(
      amountQuote?: null
    ): QuoteReturnedToLPEventFilter;
    QuoteReturnedToLP(amountQuote?: null): QuoteReturnedToLPEventFilter;

    "ShortSetTo(uint256,uint256,uint256,uint256)"(
      oldShort?: null,
      newShort?: null,
      oldCollateral?: null,
      newCollateral?: null
    ): ShortSetToEventFilter;
    ShortSetTo(
      oldShort?: null,
      newShort?: null,
      oldCollateral?: null,
      newCollateral?: null
    ): ShortSetToEventFilter;
  };

  estimateGas: {
    getCappedExpectedHedge(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentHedgedNetDelta(overrides?: CallOverrides): Promise<BigNumber>;

    getHedgingLiquidity(
      short: string,
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolHedgerParams(overrides?: CallOverrides): Promise<BigNumber>;

    getShortPosition(
      short: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hedgeDelta(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      _synthetixAdapter: string,
      _optionMarket: string,
      _optionGreekCache: string,
      _liquidityPool: string,
      _quoteAsset: string,
      _baseAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastInteraction(overrides?: CallOverrides): Promise<BigNumber>;

    openShortAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolHedgerParams(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resetInteractionDelay(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolHedgerParams(
      _poolHedgerParams: PoolHedger.PoolHedgerParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shortId(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCollateral(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCappedExpectedHedge(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentHedgedNetDelta(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHedgingLiquidity(
      short: string,
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolHedgerParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShortPosition(
      short: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hedgeDelta(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      _synthetixAdapter: string,
      _optionMarket: string,
      _optionGreekCache: string,
      _liquidityPool: string,
      _quoteAsset: string,
      _baseAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastInteraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openShortAccount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolHedgerParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resetInteractionDelay(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolHedgerParams(
      _poolHedgerParams: PoolHedger.PoolHedgerParametersStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shortId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCollateral(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
